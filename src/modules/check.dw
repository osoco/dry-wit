# mod: check
# api: public
# txt: Functions to provide ways for checking parameters.

# fun: checkFunctionPresent paramName function paramIndex
# api: public
# txt: Checks whether a function is present.
# opt: paramName: The parameter name.
# opt: function: The function name.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: checkFunctionPresent "callback" "echo" 1;
function checkFunctionPresent() {
  local _name="${1}";
  local _functionName="${2}";
  local _index="${3}";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_functionName}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isFunctionMissing "${_functionName}"; then
    exitWithError UNACCEPTABLE_API_CALL "${_name} (parameter at position ${_index}) is a non-existent function when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi
}

# fun: checkNotEmpty paramName paramValue paramIndex
# api: public
# txt: Performs a precondition check on given parameter to ensure it's not empty. Exits if the check fails.
# opt: paramName: The parameter name.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: checkNotEmpty "user" "${user}" 1 # -> throws an error if the first (1) parameter ("user") is empty.
function checkNotEmpty() {
  local _name="${1}";
  local _value="${2}";
  local _index="${3}";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}.";
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi
}

# fun: checkOneOf paramName paramValue validValues paramIndex
# api: public
# txt: Performs a precondition check on given parameter to ensure it's included in a predefined list.
# opt: paramName: The parameter name.
# opt: paramValue: The parameter value.
# opt: validValues: The list of allowed values.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: checkOneOf "option" "${option}" "VALID INVALID" 1 # -> throws an error if the first (1) parameter ("option") is neither VALID nor INVALID.
function checkOneOf() {
  local _name="${1}";
  local _value="${2}";
  local _validValues="${3}";
  local _index="${4}";

  CHECK.checkOneOf 1 "${_name}" "${_value}" "${_validValues}" "${_index}";
}

## PRIVATE functions

# fun: CHECK.checkOneOf callStackOffset paramName paramValue validValues paramIndex
# api: private
# txt: Performs a precondition check on given parameter to ensure it's included in a predefined list.
# opt: callStackOffset: The call stack offset.
# opt: paramName: The parameter name.
# opt: paramValue: The parameter value.
# opt: validValues: The list of allowed values.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: CHECK.checkOneOf 0 "option" "${option}" "VALID INVALID" 1 # -> throws an error if the first (1) parameter ("option") is neither VALID nor INVALID.
function CHECK.checkOneOf() {
  local _callStackOffset="${1}";
  if isEmpty "${_callStackOffset}"; then
    exitWithError UNACCEPTABLE_API_CALL "'callStackOffset' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  local _name="${2}";
  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  local _value="${3}";
  if isEmpty "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (${_value}) cannot be empty when calling ${_callee}. Review ${_caller}";
  fi

  local _validValues="${4}";
  if isEmpty "${_validValues}"; then
    exitWithError UNACCEPTABLE_API_CALL "'validValues' (${_validValues}) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  local _index="${5}";
  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (4) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  local _validValue;
  local _oldIFS="${IFS}";
  local _valid=${FALSE};
  local _message="";
  local _oldIFS="${IFS}";
  local _callee="${FUNCNAME[${_callStackOffset}]}";
  local _caller="${FUNCNAME[((_callStackOffset+1))]}";
  local _parentCaller="${FUNCNAME[((_callStackOffset+2))]}";

  IFS="${DWIFS}";
  local _validValue;
  for _validValue in ${_validValues}; do
    IFS="${_oldIFS}";
    if areEqual "${_value}" "${_validValue}"; then
      _valid=${TRUE};
    fi
    if isNotEmpty "${_message}"; then
      _message="${_message}, ";
    fi
    _message="${_message}${_validValue}";
  done
  IFS="${_oldIFS}";

  if isFalse ${_valid}; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (${_value}) is not valid when calling ${_caller}. Review ${_parentCaller}";
  fi
}

# fun: checkNumber paramName paramValue paramIndex
# api: public
# txt: Checks whether given parameter is a number.
# opt: paramName: The parameter name.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: checkNumber "index" "${index}" 1 # -> throws an error if the first (1) parameter ("index") is not a number.
function checkNumber() {
  local _name="${1}";
  local _value="${2}";
  local _index="${3}";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi

  if ! isNumber "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) must be a number when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi
}

# fun: checkBoolean paramName paramValue paramIndex
# api: public
# txt: Checks whether given parameter is a boolean (either a 0 or a 1).
# opt: paramName: The parameter name.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: checkBoolean "index" "${index}" 1 # -> throws an error if the first (1) parameter ("index") is not either 0 or 1.
function checkBoolean() {
  local _name="${1}";
  local _value="${2}";
  local _index="${3}";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi

  local -i _literalValue=${FALSE};

  case "${_value}" in
    TRUE|FALSE) _literalValue=${TRUE};
                ;;
  esac;

  if isFalse ${_literalValue}; then
    if    ! areEqual "${_value}" 0 \
       && ! areEqual "${_value}" 1; then
      exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) must be a boolean when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}: either TRUE or ${TRUE} for true, or FALSE or ${FALSE} for false";
    fi
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi
}

# fun: checkFileExists paramName paramValue paramIndex
# api: public
# txt: Checks whether given parameter references an existing file.
# opt: paramName: The name of the parameter.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: checkFileExists file "${file}" 1 # -> throws an error if the first (1) parameter ("file") references a file that doesn't exist.
function checkFileExists() {
  local _name="${1}";
  local _value="${2}";
  local _index="${3}";

  if isEmpty "${_name}"; then
    exitWithError UNACCEPTABLE_API_CALL "'name' (1) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi

  if isEmpty "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) cannot be empty when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}";
  fi

  if ! fileExists "${_value}"; then
    exitWithError UNACCEPTABLE_API_CALL "'${_name}' (parameter at position ${_index}) should reference an existing file when calling ${FUNCNAME[1]}. Review ${FUNCNAME[2]}: ${_value} does not exist";
  fi

  if isEmpty "${_index}"; then
    exitWithError UNACCEPTABLE_API_CALL "'index' (3) cannot be empty when calling ${FUNCNAME[0]}. Review ${FUNCNAME[1]}";
  fi
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
