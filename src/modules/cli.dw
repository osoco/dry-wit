# mod: cli
# api: public
# txt: Functions to parse and check command-line arguments.

# env: EXPECTS_ARGUMENT: A constant to represent that a flag expects an argument.
declare -gx EXPECTS_ARGUMENT=${TRUE};
# env: NO_ARGUMENT: A constant to represent that a flag doesn'n expect an argument.
declare -gx NO_ARGUMENT=${FALSE};
# env: SINGLE: A constant to represent a parameter only accepts a value.
declare -gx SINGLE=${FALSE};
#env: MULTIPLE: A constant to represent a parameter accepts multiple values.
declare -gx MULTIPLE=${TRUE};

# fun: CLI.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: CLI.getModuleName; echo "Module: ${RESULT}";
function CLI.getModuleName() {
  export RESULT="CLI";
  return ${TRUE};
}

# fun: CLI.getFlagKeysVariableName
# api: private
# txt: Retrieves the name of the variable containing the flag keys.
# txt: Returns 0/TRUE always.
# use: CLI.getFlagKeysVariableName; local -n flagKeys=${RESULT};
function CLI.getFlagKeysVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" FLAG_KEYS;
}

# fun: CLI.getFlagShortNamesVariableName
# api: private
# txt: Retrieves the name of the variable containing the short versions of the flag names.
# txt: Returns 0/TRUE always.
# use: CLI.getFlagShortNamesVariableName; local -n flagShortNames=${RESULT};
function CLI.getFlagShortNamesVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" FLAG_SHORT_NAMES;
}

# fun: CLI.getFlagLongNamesVariableName
# api: private
# txt: Retrieves the name of the variable containing the long versions of the flag names.
# txt: Returns 0/TRUE always.
# use: CLI.getFlagLongNamesVariableName; local -n flagLongNames=${RESULT};
function CLI.getFlagLongNamesVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" FLAG_LONG_NAMES;
}

# fun: CLI.getFlagDescriptionsVariableName
# api: private
# txt: Retrieves the name of the variable containing the flag descriptions.
# txt: Returns 0/TRUE always.
# use: CLI.getFlagDescriptionsVariableName; local -n flagDescriptions=${RESULT};
function CLI.getFlagDescriptionsVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" FLAG_DESCRIPTIONS;
}

# fun: CLI.getMandatoryFlagsVariableName
# api: private
# txt: Retrieves the name of the variable containing the mandatory flag information.
# txt: Returns 0/TRUE always.
# use: CLI.getMandatoryFlagsVariableName; local -n mandatoryFlags=${RESULT};
function CLI.getMandatoryFlagsVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" MANDATORY_FLAGS;
}

# fun: CLI.getFlagExpectingArgumentsVariableName
# api: private
# txt: Retrieves the name of the variable containing the information about whether each flag expects arguments.
# txt: Returns 0/TRUE always.
# use: CLI.getFlagExpectingArgumentsVariableName; local -n flagExpectingArguments=${RESULT};
function CLI.getFlagExpectingArgumentsVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" FLAG_EXPECTING_ARGUMENTS;
}

# fun: CLI.getOptionalFlagDefaultValuesVariableName
# api: private
# txt: Retrieves the name of the variable containing the information about the default values for optional flags.
# txt: Returns 0/TRUE always.
# use: CLI.getOptionalFlagDefaultValuesVariableName; local -n optionalFlagDefaultValues=${RESULT};
function CLI.getOptionalFlagDefaultValuesVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" OPTIONAL_FLAG_DEFAULT_VALUES;
}

# fun: addCommandLineFlag longName shortName description MANDATORY|OPTIONAL EXPECTS_ARGUMENT|NO_ARGUMENT defaultValue?
# api: public
# txt: Adds a command-line flag.
# opt: longName: The long name of the flag.
# opt: shortName: The short name of the flag.
# opt: description: The flag description.
# opt: MANDATORY|OPTIONAL: MANDATORY if the flag is mandatory; OPTIONAL otherwise.
# opt: EXPECTS_ARGUMENT|NO_ARGUMENT: EXPECTS_ARGUMENT if the flag contains a value; NO_ARGUMENT otherwise.
# opt: defaultValue: The default value (if the flag is optional).
# txt: Returns 0/TRUE if the flag is added successfully; 1/FALSE otherwise.
# use: if addCommandLineFlag "file" "f" "The file to read" MANDATORY EXPECTS_ARGUMENT "/tmp/file.log"; then
# use:   echo "-f|--file flag added"
# use: fi
function addCommandLineFlag() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;
  local _shortName="${2}";
  checkNotEmpty shortName "${_shortName}" 2;
  local _description="${3}";
  checkNotEmpty description "${_description}" 3;
  local _mandatory="${4}";
  CLI.checkMandatoryOrOptional "${_mandatory}" 4;
  local _expectsArgument="${5}";
  CLI.checkExpectsArgumentOrNoArgument "${_expectsArgument}" 5;
  local _defaultValue="${6}";

  local -i _rescode=${TRUE};

  if removePrefix "${_longName}" "-"; then
    _longName="${RESULT}";
  fi
  if removePrefix "${_shortName}" "-"; then
    _shortName="${RESULT}";
  fi

  CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}";
  local _flagKey="${RESULT}";

  CLI.getFlagKeysVariableName;
  local -n _flagKeys=${RESULT};

  local -i _index;

  if isEmpty "${_flagKeys[@]}"; then
    _index=0;
  elif arrayDoesNotContain "${_flagKey}" "${_flagKeys[@]}"; then
    _index=${#_flagKeys[@]};
  else
    getIndexOfItemInArray "${_flagKey}" "${_flagKeys[@]}";
    _index=${RESULT};
  fi

  _flagKeys[${_index}]="${_flagKey}";

  CLI.getFlagShortNamesVariableName;
  local -n _flagShortNames=${RESULT};
  _flagShortNames[${_longName}]="${_shortName}";

  CLI.getFlagLongNamesVariableName;
  local -n _flagLongNames=${RESULT};
  _flagLongNames[${_shortName}]="${_longName}";

  CLI.getFlagDescriptionsVariableName;
  local -n _flagDescriptions="${RESULT}";
  _flagDescriptions[${_flagKey}]="${_description}";

  normalizeUppercase "${_longName}";
  local _longNameInUpperCase="${RESULT}";
  if areEqual "${_mandatory}" "MANDATORY"; then
    addError "${_longNameInUpperCase}_IS_MANDATORY" "${_longName} is mandatory";
  fi

  CLI.getMandatoryFlagsVariableName;
  local -n _mandatoryFlags="${RESULT}";
  _mandatoryFlags[${_flagKey}]=${_mandatory};

  if areEqual "${_expectsArgument}" "EXPECTS_ARGUMENT"; then
    addError "${_longNameInUpperCase}_EXPECTS_AN_ARGUMENT" "${_longName} expects an argument";
  fi

  CLI.getFlagExpectingArgumentsVariableName;
  local -n _flagExpectingArguments="${RESULT}";
  _flagExpectingArguments[${_flagKey}]="${_expectsArgument}";

  CLI.getOptionalFlagDefaultValuesVariableName;
  local -n _optionalFlagDefaultValues=${RESULT};
  _optionalFlagDefaultValues[${_flagKey}]="${_defaultValue}";

  return ${_rescode};
}

# fun: CLI.getParameterNamesVariableName
# api: private
# txt: Retrieves the name of the variable containing the list of parameter names.
# txt: Returns 0/TRUE always.
# use: CLI.getParameterNamesVariableName; local -n parameterNames=${RESULT};
function CLI.getParameterNamesVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" PARAMETER_NAMES;
}

# fun: CLI.getParameterDescriptionsVariableName
# api: private
# txt: Retrieves the name of the variable containing the parameter descriptions.
# txt: Returns 0/TRUE always.
# use: CLI.getParameterDescriptionsVariableName; local -n parameterDescriptions=${RESULT};
function CLI.getParameterDescriptionsVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" PARAMETER_DESCRIPTIONS;
}

# fun: CLI.getMandatoryParametersVariableName
# api: private
# txt: Retrieves the name of the variable containing the information about whether each parameter is mandatory or not.
# txt: Returns 0/TRUE always.
# use: CLI.getMandatoryParametersVariableName; local -n mandatoryParameters=${RESULT};
function CLI.getMandatoryParametersVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" MANDATORY_PARAMETERS;
}

# fun: CLI.getSingleParametersVariableName
# api: private
# txt: Retrieves the name of the variable containing the information about whether each parameter is single or not.
# txt: Returns 0/TRUE always.
# use: CLI.getSingleParametersVariableName; local -n singleParameters=${RESULT};
function CLI.getSingleParametersVariableName() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalVariableName "${_moduleName}" SINGLE_PARAMETERS;
}

# fun: addCommandLineParameter paramName paramDescription MANDATORY|OPTIONAL SINGLE|MULTIPLE
# api: public
# txt: Declares the script expects another command-line parameter.
# opt: paramName: The parameter name.
# opt: paramDescription: The parameter description.
# opt: MANDATORY|OPTIONAL: MANDATORY if the parameter is mandatory; OPTIONAL otherwise.
# opt: SINGLE|MULTIPLE: SINGLE if the parameter can not be repeated; MULTIPLE otherwise.
# txt: Returns 0/TRUE always.
# use: addCommandLineParameter "project" "The project to process" MANDATORY SINGLE;
function addCommandLineParameter() {
  local _name="${1}";
  checkNotEmpty name "${_name}" 1;
  local _description="${2}";
  checkNotEmpty description "${_description}" 2;
  local _mandatoryOrOptional="${3}";
  checkNotEmpty mandatoryOrOptional "${_mandatoryOrOptional}" 3;
  CLI.checkMandatoryOrOptional "${_mandatoryOrOptional}" 3;
  local _singleOrMultiple="${4}";
  checkNotEmpty singleOrMultiple "${_singleOrMultiple}" 4;
  CLI.checkSingleOrMultiple "${_singleOrMultiple}" 4;

  CLI.getParameterNamesVariableName;
  local -n _parameterNames="${RESULT}";

  if    isEmpty "${_parameterNames[@]}" \
     || arrayDoesNotContain "${_name}" "${_parameterNames[@]}"; then

    _parameterNames[${#_parameterNames[@]}]="${_name}";

    CLI.getParameterDescriptionsVariableName;
    local -n _parameterDescriptions=${RESULT};
    _parameterDescriptions["${_name}"]="${_description}";

    CLI.getMandatoryParametersVariableName;
    local -n _mandatoryParameters=${RESULT};
    _mandatoryParameters["${_name}"]="${_mandatoryOrOptional}";

    CLI.getSingleParametersVariableName;
    local -n _singleParameters=${RESULT};
    _singleParameters["${_name}"]="${_singleOrMultiple}";
  fi

  return ${TRUE};
}

# fun: flagEnabled flagName
# api: public
# txt: Checks whether a given flag is enabled.
# opt: flagName: the name of the flag variable.
# txt: Returns 0/TRUE if the flag is enabled, 1/FALSE otherwise.
# use: if flagEnabled MY_FLAG; then ...
function flagEnabled() {
  local _flagVar="${1}";
  checkNotEmpty flagName "${_flagVar}" 1;
  local _flagVal;
  local -i rescode;

  evalVar "${_flagVar}";
  _flagVal="${RESULT}";
  if    areEqual "${_flagVal}" "${TRUE}" \
     || areEqual "${_flagVal}" "TRUE"; then
    rescode=${TRUE};
  else
    rescode=${FALSE};
  fi

  return ${rescode};
}

# fun: removeCommandLineFlag shortOrLongName
# api: public
# txt: Removes a command-line flag.
# opt: shortOrLongName: The flag (either short or long name).
# txt: Returns 0/TRUE if the flag is removed successfully; 1/FALSE otherwise.
# use: if removeCommandLineFlag "--file"; then
#        echo "--file flag removed";
#      fi
function removeCommandLineFlag() {
  local _flag="${1}";
  checkNotEmpty shortOrLongName "${_flag}" 1;
  local _longName;
  local _shortName;
  local -i _rescode;
  local _flagKey;

  if CLI.retrieveCommandLineFlagKey "${_flag}"; then
    _flagKey="${RESULT}";

  CLI.getFlagKeysVariableName;
  local -n _flagKeys="${RESULT}";

  if    isNotEmpty "${_flagKey}" \
     && isNotEmpty "${_flagKeys[@]}" \
     && arrayContains "${_flagKey}" "${_flagKeys[@]}"; then
      _flagKeys=( "${_flagKeys[@]/${_flagKey}}" );
      CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
      _longName="${RESULT}";
      CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
      _shortName="${RESULT}";

      CLI.getFlagShortNamesVariableName;
      local -n _flagShortNames="${RESULT}";
      unset _flagShortNames[${_longName}];

      CLI.getFlagLongNamesVariableName;
      local -n _flagLongNames="${RESULT}";
      unset _flagLongNames[${_shortName}];

      CLI.getFlagDescriptionsVariableName;
      local -n _flagDescriptions="${RESULT}";
      unset _flagDescriptions[${_flagKey}];

      CLI.getMandatoryFlagsVariableName;
      local -n _mandatoryFlags="${RESULT}";
      unset _mandatoryFlags[${_flagKey}];

      CLI.getFlagExpectingArgumentsVariableName;
      local -n _flagExpectingArguments="${RESULT}";
      unset _flagExpectingArguments[${_flagKey}];

      CLI.getOptionalFlagDefaultValuesVariableName;
      local -n _optionalFlagDefaultValues="${RESULT}";
      unset _optionalFlagDefaultValues[${_flagKey}];
    fi

  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: getScriptCopyright
# api: public
# txt: Retrieves the script copyright.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the script copyright.
# use: getScriptCopyright; echo "Copyright: ${RESULT}";
function getScriptCopyright() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";

  DW.getGlobalString "${_moduleName}" SCRIPT_COPYRIGHT;

  return ${TRUE};
}

# fun: setScriptCopyright copyrightDescription
# api: public
# txt: Sets the script copyright message.
# opt: copyrightDescription: The copyright message.
# txt: Returns 0/TRUE always.
# use: setScriptCopyright "2018-today Acme Inc.";
function setScriptCopyright() {
  local _copyright="${1}";
  checkNotEmpty copyrightDescription "${_copyright}" 1;

  CLI.getModuleName;
  local _moduleName="${RESULT}";

  DW.setGlobalString "${_moduleName}" SCRIPT_COPYRIGHT "${_copyright}";

  return ${TRUE};
}

# fun: getScriptDescription
# api: public
# txt: Retrieves the script description.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the script description.
# use: getScriptDescription; echo "description: ${RESULT}";
function getScriptDescription() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";

  DW.getGlobalString "${_moduleName}" SCRIPT_DESCRIPTION;

  return ${TRUE};
}

# fun: setScriptDescription description
# api: public
# txt: Defines the script description.
# opt: description: The description.
# txt: Returns 0/TRUE in any case.
# use: setScriptDescription "This script calculates fibonacci sequence items"
function setScriptDescription() {
  local _description="${1}";
  checkNotEmpty description "${_description}" 1;

  CLI.getModuleName;
  local _moduleName="${RESULT}";

  DW.setGlobalString "${_moduleName}" SCRIPT_DESCRIPTION "${_description}";

  return ${TRUE};
}

# fun: getScriptLicenseSummary
# api: public
# txt: Retrieves the script license summary.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the license summary.
# use: getScriptLicenseSummary; echo "License summary: ${RESULT}";
function getScriptLicenseSummary() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";

  DW.getGlobalString "${_moduleName}" SCRIPT_LICENSE_SUMMARY;

  return ${TRUE};
}

# fun: setScriptLicenseSummary license
# api: public
# txt: Sets the script license summary.
# opt: license: The license message.
# txt: Returns 0/TRUE always.
# use: setScriptLicenseSummary "Distributed this under the GNU General Public License v3.";
function setScriptLicenseSummary() {
  local _license="${1}";
  checkNotEmpty license "${_license}" 1;

  CLI.getModuleName;
  local _moduleName="${RESULT}";

  DW.setGlobalString "${_moduleName}" SCRIPT_LICENSE_SUMMARY "${_license}";

  return ${TRUE};
}

# fun: usage
# api: private
# txt: Prints the usage description.
# txt: Returns 0/TRUE always.
# use: usage
function usage() {
  CLI.commandLineFlagsUsage
  if ! CLI.commandLineParametersUsage; then
    echo;
  fi
  CLI.scriptCopyrightUsage
  CLI.scriptLicenseSummaryUsage;
  if ! CLI.scriptDescriptionUsage; then
    echo;
  fi
  echo "Where:"
  CLI.commandLineFlagsDetailedUsage
  CLI.commandLineParametersDetailedUsage
}

# fun: checkInput arguments
# api: private
# txt: Checks the command-line arguments.
# opt: arguments: The command-line arguments.
# txt: Returns 0/TRUE always, but it could raise an exception and exit.
# use: checkInput $@;
function checkInput() {
  local _flags=$(CLI.extractFlags $@);
  local _flag;
  local -a _flagsChecked=();
  local -i _flagCount=0;
  local _oldIFS="${IFS}";

  # Flags
  IFS="${DWIFS}";
  for _flag in ${_flags}; do
    IFS="${_oldIFS}";

    if isHelpFlagProvided; then
      break;
    else
      _flagCount=$((_flagCount+1));
      shift;

      if areEqual "${_flag}" "--"; then
        break;
      else
        CLI.checkFlag "${_flag}" $@;
        _shifts=$?;
        IFS="${DWIFS}";
        for _i in $(seq 1 ${_shifts}); do
          IFS="${_oldIFS}";
          shift;
        done
        _flagsChecked[${#_flagsChecked[@]}]="${_flag}";
      fi
    fi
  done
  IFS="${_oldIFS}";

  if ! isHelpFlagProvided; then
    CLI.checkForMissingMandatoryCommandLineFlags "${_flagsChecked[@]}";

    CLI.checkCommandLineParameters $@;

    CLI.checkEnvironmentVariables;

    if isFunctionPresent "dw_checkInput"; then
      dw_checkInput;
    fi
  fi
}

# fun: parseInput arguments
# api: private
# txt: Parses the command-line arguments.
# opt: arguments: The command-line arguments.
# txt: Returns 0/TRUE if the command-line arguments were parsed successfully; 1/FALSE otherwise.
# use: parseInput *@
function parseInput() {
  local _flags=$(CLI.extractFlags $@);
  local _oldIFS="${IFS}";
  local -i _i;
  local -a _providedFlags=();
  local _flag;
  local -i _shifts;
  local -i _aux1=0;
  local -i _aux2=0;
  local _aux3;
  local _argsAux;

  # Flags
  IFS="${DWIFS}";
  for _flag in ${_flags}; do
    IFS="${_oldIFS}";
    shift;
    _aux1=$((_aux1+1));
    _providedFlags[${#_providedFlags[@]}]="${_flag}";

    if areEqual "${_flag}" "--"; then
      break;
    else
      CLI.parseFlag "${_flag}" "${@}";
      _shifts=$?;
      IFS="${DWIFS}";
      for _i in $(seq 1 ${_shifts}); do
        IFS="${_oldIFS}";
        shift;
        _aux2=$((_aux2+1));
      done
    fi
  done
  IFS="${_oldIFS}";

  CLI.parseNotProvidedFlags "${_providedFlags[@]}";

  CLI.parseCommandLineParameters ${@};
}

# fun: dw_parse_debug_cli_flag
# api: private
# txt: Callback function when the user includes the debug (-v|--debug) flag.
# txt: It's based on a naming convention: dw_parse_debug_cli_flag
function dw_parse_debug_cli_flag() {
  setDebugEnabled;
}

# fun: dw_parse_trace_cli_flag
# api: private
# txt: Callback function when the user includes the trace (-vv|--trace) flag.
# txt: It's based on a naming convention: dw_parse_trace_cli_flag
function dw_parse_trace_cli_flag() {
  setTraceEnabled;
}

# fun: dw_parse_quiet_cli_flag
# api: private
# txt: Callback function when the user includes the quiet (-q|--quiet) flag.
# txt: It's based on a naming convention: dw_parse_quiet_cli_flag
function dw_parse_quiet_cli_flag() {
  export QUIET=${TRUE};
}

# fun: setHelpFlagProvided
# api: private
# txt: Indicates the help flag has been specified.
# txt: Returns 0/TRUE always.
# use: setHelpFlagProvided;
function setHelpFlagProvided() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.setGlobalInt "${_moduleName}" HELP_FLAG_PROVIDED ${TRUE};
}

# fun: isHelpFlagProvided
# api: private
# txt: Retrieves whether the help flag has been specified.
# txt: Returns 0/TRUE in such case; 1/FALSE otherwise.
# use: if isHelpFlagProvided; then echo "help requested"; fi
function isHelpFlagProvided() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";
  DW.getGlobalInt "${_moduleName}" HELP_FLAG_PROVIDED;
  local -i _rescode=${RESULT};
  return ${_rescode};
}

# fun: dw_parse_help_cli_flag
# api: private
# txt: Callback function when the user includes the help (-h|--help) flag.
# txt: It's based on a naming convention: dw_parse_help_cli_flag
function dw_parse_help_cli_flag() {
  setHelpFlagProvided;
}

# fun: CLI.extractFlags cliArguments
# api: private
# txt: Extracts the flags from the arguments.
# txt: Prints the flags to stdout.
# opt: cliArguments: The arguments to process.
# use: local _myFlags=$(CLI.extractFlags $*);
function CLI.extractFlags() {
  echo " $@" \
    | awk -F" -" '{for (i=2; i<=NF; i++){printf("-%s \n", $i);}}' \
    | awk -F" " '{print $1;}'
}

# fun: CLI.extractFlagValue flagName cliArguments
# api: private
# txt: Extracts the flag value for the arguments.
# txt: Prints the flag value to stdout.
# opt: flagName: the name of the flag.
# opt: cliArguments: The arguments to process.
# use: local _Ext=$(CLI.extractFlagValue "ext" $*);
function CLI.extractFlagValue() {
  local _flag=${1};
  checkNotEmpty flagName "${_flag}" 1;
  shift;
  checkNotEmpty cliArguments "${@}" 2;

  echo " $@" \
    | awk -F" -" '{printf("-"); for (i=2; i<=NF; i++){if(i%2 == 1) {printf("-");}; printf("%s \n", $i);}}' \
    | grep -e "^${_flag} " \
    | awk -v f="${_flag}" '{printf("echo \"%s\" | sed -e \"s_^%s __g\"\n", $2, f);}' \
    | sh;
}

# fun: CLI.retrieveCommandLineFlagShortNameForLongName longName
# api: private
# txt: Retrieves the short format of the flag whose long name is provided.
# opt: longName: The long name of the flag.
# txt: Returns 0/TRUE if the long name is found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT will contain the short name of the flag.
# use: if CLI.retrieveCommandLineFlagShortNameForLongName "file"; then
#        echo "Short name of 'file' is ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagShortNameForLongName() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;
  local -i _rescode;
  local _result;

  CLI.getFlagShortNamesVariableName;
  local -n _flagShortNames="${RESULT}";

  _result="${_flagShortNames[${_longName}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.isCommandLineFlagInLongFormat flag
# api: private
# txt: Retrieves whether given flag is in long format.
# opt: flag: the flag.
# txt: Returns 0/TRUE if the flag is in long format; 1/FALSE otherwise.
# use: if CLI.isCommandLineFlagInLongFormat "${flag}"; then
#        echo "Flag ${flag} is in long format";
#      fi
function CLI.isCommandLineFlagInLongFormat() {
  local _flag="${1}";
  checkNotEmpty flag "${_flag}" 1;
  local -i _rescode;

  if areEqual "${_flag}" "${_flag#--}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineFlagLongNameForShortName shortName
# api: private
# txt: Retrieves the short format of the flag whose long name is provided.
# opt: shortName: The short name of the flag.
# txt: Returns 0/TRUE if the short name is found; 1/FALSE otherwise.
# use: if CLI.retrieveCommandLineFlagLongNameForShortName "f"; then
#        echo "Long name of 'f' is ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagLongNameForShortName() {
  local _shortName="${1}";
  checkNotEmpty shortName "${_shortName}" 1;
  local -i _rescode;
  local _result;

  CLI.getFlagLongNamesVariableName;
  local -n _flagLongNames=${RESULT};

  _result="${_flagLongNames[${_shortName}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.isCommandLineFlagInShortFormat flag
# api: private
# txt: Retrieves whether given flag is in short format.
# opt: flag: The flag.
# txt: Returns 0/TRUE if the flag is in short format; 1/FALSE otherwise.
# use: if CLI.isCommandLineFlagInShortFormat "${flag}"; then
#        echo "Flag ${flag} is in short format";
#      fi
function CLI.isCommandLineFlagInShortFormat() {
  local _flag="${1}";
  checkNotEmpty flag "${_flag}" 1;
  local -i _rescode;

  if areEqual "${_flag}" "${_flag#-}" || CLI.isCommandLineFlagInLongFormat "${_flag}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: CLI.checkFlag flag
# api: private
# txt: Performs some checks on given flag.
# opt: flag: The flag to check.
# txt: It exits the script if the flag is unknown; otherwise returns the number of parameters to shift.
# use: CLI.checkFlag "-f" $@;
#      echo "Must shift $?";
function CLI.checkFlag() {
  local _flag="${1}";
  checkNotEmpty flag "${_flag}" 1;
  shift;
  local _flagKey;
  local _shortName;
  local _longName;
  local -i _continue=${TRUE};
  local -i _result=0;

  case ${_flag} in
    --)
      shift;
      _continue=${FALSE};
      ;;
  esac

  if startsWith "${_flag}" "-DW:"; then
    _continue=${FALSE};
  fi

  if isTrue ${_continue}; then
    if CLI.retrieveCommandLineFlagLongName "${_flag}"; then
      _longName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    if CLI.retrieveCommandLineFlagShortName "${_flag}"; then
      _shortName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}";
    _flagKey="${RESULT}";

    CLI.getFlagKeysVariableName;
    local -n _flagKeys="${RESULT}";

    if arrayDoesNotContain "${_flagKey}" "${_flagKeys[@]}"; then
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    CLI.checkCommandLineFlag "${_flagKey}" "${_longName}" $@;
    _result=$((_result+$?));
  fi

  return ${_result};
}

# fun: CLI.retrieveCommandLineFlagLongName flag
# api: private
# txt: Retrieves the long name of a flag.
# opt: flag: The flag.
# txt: Returns 0/TRUE if the long name was retrieved; 1/FALSE otherwise.
# txt: If the script returns 0/TRUE, the variable RESULT will contain the long name of the flag.
# use: if CLI.retrieveCommandLineFlagLongName "-f"; then
#        echo "long name: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagLongName() {
  local _flag="${1}";
  checkNotEmpty flag "${_flag}" 1;
  local _result;
  local -i _rescode;

  if CLI.isCommandLineFlagInLongFormat "${_flag}"; then
    _result="${_flag#--}";
    _rescode=${TRUE};
  elif    CLI.isCommandLineFlagInShortFormat "${_flag}" \
       && CLI.retrieveCommandLineFlagLongNameForShortName "${_flag#-}"; then
    _result="${RESULT}";
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineShortName flag
# api: private
# txt: Retrieves the short name of a flag.
# opt: flag: The flag.
# txt: Returns 0/TRUE if the short name was retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, then the variable RESULT contains the short name of the flag.
# use: if CLI.retrieveCommandLineShortName "--file"; then
#        echo "short name: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagShortName() {
  local _flag="${1}";
  checkNotEmpty flag "${_flag}" 1;
  local _result;
  local -i _rescode;

  if    CLI.isCommandLineFlagInLongFormat "${_flag}" \
     && CLI.retrieveCommandLineFlagShortNameForLongName "${_flag#--}"; then
    _result="${RESULT}";
    _rescode=${TRUE};
  elif CLI.isCommandLineFlagInShortFormat "${_flag}"; then
    _result="${_flag#-}";
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.checkCommandLineFlag flagKey longName
# api: private
# txt: Checks a command line flag.
# opt: flagKey: The key of the flag.
# opt: longName: The flag long name.
# txt: If the check is successful it returns the number of arguments to shift. Otherwise it exits with an error.
# use: CLI.checkCommandLineFlag "${flagKey}" "${longName}";
function CLI.checkCommandLineFlag() {
  local _flagKey="${1}";
  checkNotEmpty flagKey "${_flagKey}" 1;
  local _longName="${2}";
  checkNotEmpty longName "${_longName}" 2;
  shift;
  shift;
  local _argument;
  local _longNameInUpperCase;
  local _checkCallback;
  local -i _functionDefined=${FALSE};
  local -i _mandatory;
  local -i _result=${TRUE};

  CLI.buildNameOfTheCallbackFunctionToCheckFlag "${_longName}";
  _checkCallback="${RESULT}";
  if isFunctionDefined "${_checkCallback}"; then
    _functionDefined=${TRUE};
  else
    toLower "${_checkCallback}";
    _checkCallback="${RESULT}";
    if isFunctionDefined "${_checkCallback}"; then
      _functionDefined=${TRUE};
    fi
  fi

  if CLI.isCommandLineFlagMandatory "${_flagKey}"; then
    _mandatory=${TRUE};
  fi

  if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
    _argument="${1}";
    toUpper "${_longName}";
    _longNameInUpperCase="${RESULT}";
    if isTrue ${_mandatory} && isEmpty "${_argument}"; then
      exitWithError "${_longNameInUpperCase}_EXPECTS_AN_ARGUMENT" "${_longName} flag expects an argument";
    fi
    if isTrue ${_functionDefined}; then
      "${_checkCallback}" "${_argument}";
    fi
    _result=${FALSE};
  elif isTrue ${_functionDefined}; then
    "${_checkCallback}";
  fi

  return ${_result};
}

# fun: CLI.checkForMissingMandatoryCommandLineFlags flags
# api: private
# txt: Checks for mandatory command line flags that are declared but not provided.
# opt: flags: The flags provided.
# use: CLI.checkForMissingMandatoryCommandLineFlags "-f --file -v -vv";
function CLI.checkForMissingMandatoryCommandLineFlags() {
  local _flagsChecked="$@";
  local _key;
  local _longName;
  local _longNameInUpperCase;
  local _oldIFS="${IFS}";

  CLI.getFlagKeysVariableName;
  local -n _flagKeys="${RESULT}";

  if isNotEmpty "${_flagKeys[@]}"; then
    IFS="${DWIFS}";
    for _key in ${_flagKeys[@]}; do
      IFS="${_oldIFS}";
      if CLI.retrieveCommandLineFlagLongNameFromKey "${_key}"; then
        _longName="${RESULT}";
        toUpper "${_longName}";
        _longNameInUpperCase="${RESULT}";
        if isEmpty "${_flagsChecked}" || ! CLI.isCommandLineFlagAlreadyChecked "${_flagsChecked}" "${_key}"; then
          if CLI.isCommandLineFlagMandatory "${_key}"; then
            exitWithError "${_longNameInUpperCase}_IS_MANDATORY" "${_longName} flag is mandatory";
          fi
        fi
        if isFunctionDefined "dw_check_${_longName}_cli_flag"; then
          "dw_check_${_longName}_cli_flag";
        fi
      else
        exitWithError DRYWIT_BUG "flagKey ${_key} not found";
      fi
    done
    IFS="${_oldIFS}";
  fi
}

# fun: CLI.isCommandLineFlagAlreadyChecked alreadyCheckedFlags flagKey
# api: private
# txt: Checks whether the flag has been already checked.
# opt: alreadyCheckedFlags: The already-checked flags.
# opt: flagKey: The flag key to check.
# txt: Returns 0/TRUE if the flag has been checked; 1/FALSE otherwise.
# use: if CLI.isCommandLineFlagAlreadyChecked "-f -v -h" "${flagKey}"; then
#        echo "${flagKey} already checked";
#      fi
function CLI.isCommandLineFlagAlreadyChecked() {
  local _flagsAlreadyChecked="${1}";
  checkNotEmpty alreadyCheckedFlags "${_flagsAlreadyChecked}" 1;
  local _flagKey="${2}";
  checkNotEmpty flagKey "${_flagKey}" 2;
  local -i _rescode;

  CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
  _longName="--${RESULT}";
  CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
  _shortName="-${RESULT}";

  if    arrayContains "${_longName}" "${_flagsAlreadyChecked}" \
     || arrayContains "${_shortName}" "${_flagsAlreadyChecked}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.checkCommandLineParameters parameter*
# api: private
# txt: Checks the command-line parameters.
# opt: parameter: The parameters provided.
# txt: If the parameter checks fail, exits; otherwise returns 0/TRUE.
# use: CLI.checkCommandLineParameters "/tmp/1.txt" "http://www.example.com";
function CLI.checkCommandLineParameters() {
  local _parameterName;
  local _parameterValue;
  local _parameterNameInUpperCase;
  local -i _callbackDefined;
  local -i _mandatory;
  local -i _multiple;
  local _oldIFS="${IFS}";

  # Parameters
  CLI.getParameterNamesVariableName;
  local -n _parameterNames="${RESULT}";

  IFS="${DWIFS}";
  for _parameterName in ${_parameterNames[*]}; do
    IFS="${_oldIFS}";
    _parameterValue="${1}";
    shift;
    if CLI.isCommandLineParameterMandatory "${_parameterName}"; then
      _mandatory=${TRUE};
    else
      _mandatory=${FALSE};
    fi
    if isFunctionDefined "dw_check_${_parameterName}_cli_parameter"; then
      _callbackDefined=${TRUE};
    else
      _callbackDefined=${FALSE};
    fi
    if CLI.isCommandLineParameterMultiple "${_parameterName}"; then
      _multiple=${TRUE};
    else
      _multiple=${FALSE};
    fi
    if isEmpty "${_parameterValue}" && isTrue ${_mandatory}; then
      toUpper "${_parameterName}";
      _parameterNameInUpperCase="${RESULT}";
      exitWithError "${_parameterNameInUpperCase}_IS_MANDATORY" "${_parameterName} is mandatory";
    fi
    if isTrue ${_callbackDefined}; then
      if isTrue ${_multiple}; then
        "dw_check_${_parameterName}_cli_parameter" "${_parameterValue}" ${@};
      else
        "dw_check_${_parameterName}_cli_parameter" "${_parameterValue}";
      fi
    fi
  done
  IFS="${_oldIFS}";
}

# fun: CLI.checkEnvironmentVariables
# api: private
# txt: Checks the environment variables.
# txt: If the environment variables checks fail, exits; otherwise returns 0/TRUE.
# use: CLI.checkEnvironmentVariables;
function CLI.checkEnvironmentVariables() {
  local _envVars;
  local -i _callbackDefined;
  local _envVarName;
  local _envVarValue;
  local _envVarNameInLowerCase;
  local _oldIFS="${IFS}";

  retrieveCustomEnvironmentVariables;
  _envVars="${RESULT}";

  IFS="${DWIFS}";
  for _envVarName in ${_envVars}; do
    IFS="${_oldIFS}";

    if isEnvVarMandatory "${_envVarName}"; then
      evalVar "${_envVarName}";
      _envVarValue="${RESULT}";
      if isEmpty "${_envVarValue}"; then
        exitWithError "${_envVarName}_IS_MANDATORY" "${_envVarName} environment variable is mandatory";
      fi
    fi

    toLower "${_envVarName}";
    _envVarNameInLowerCase="${RESULT}";
    if isFunctionDefined "dw_check_${_envVarNameInLowerCase}_cli_envvar"; then
      _callbackDefined=${TRUE};
    else
      _callbackDefined=${FALSE};
    fi
    if isTrue ${_callbackDefined}; then
      "dw_check_${_envVarNameInLowerCase}_cli_envvar" "${_envVar}"
    fi
  done
  IFS="${_oldIFS}";
}

# fun: CLI.isFlagDefined flagKey
# api: private
# txt: Checks whether given flag is defined.
# opt: flagKey: The flag key.
# txt: Returns 0/TRUE if the flag is defined; 1/FALSE otherwise.
# use: if CLI.isFlagDefined "f|file"; then
#        echo "f/file is defined";
#      fi
function CLI.isFlagDefined() {
  local _flagKey="${1}";
  checkNotEmpty flagKey "${_flagKey}" 1;
  local -i _rescode;

  CLI.getFlagKeysVariableName;
  local -n _flagKeys="${RESULT}";

  arrayContains "${_flagKey}" "${_flagKeys[@]}";
  _rescode=$?;

  return ${_rescode};
}

# fun: CLI.buildNameOfTheCallbackFunctionToCheckFlag longName
# api: private
# txt: Builds the name of the callback function used when checking a flag.
# opt: longName: The long name of the flag.
# txt: Returns 0/TRUE always.
# txt: RESULT will contain the name of the callback function.
# use: CLI.buildNameOfTheCallbackFunctionToCheckFlag "file";
#      echo "callback function: ${RESULT}";
function CLI.buildNameOfTheCallbackFunctionToCheckFlag() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;

  export RESULT="dw_check_${_longName}_cli_flag";
}

# fun: CLI.buildNameOfTheCallbackFunctionToParseFlag longName
# api: private
# txt: Builds the name of the callback function used when parsing a flag.
# opt: longName: The long name of the flag.
# txt: Returns 0/TRUE always.
# txt: RESULT will contain the name of the callback function.
# use: CLI.buildNameOfTheCallbackFunctionToParseFlag "file";
#      echo "callback function: ${RESULT}";
function CLI.buildNameOfTheCallbackFunctionToParseFlag() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;

  export RESULT="dw_parse_${_longName}_cli_flag";
}

# fun: CLI.parseCallbackDefinedForFlag longName
# api: private
# txt: Checks whether the callback function to parse given flag (in its long-name version) exists.
# opt: longName: The long name of the flag.
# txt: Returns 0/TRUE if the callback function exists; 1/FALSE otherwise.
# txt: The variable RESULT contains the parse callback function.
# use: if CLI.parseCallbackDefinedForFlag "file"; then echo "The callback function to parse 'file' flag exists: ${RESULT}"; fi
function CLI.parseCallbackDefinedForFlag() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;
  local _parseCallback;
  local -i _rescode;

  CLI.buildNameOfTheCallbackFunctionToParseFlag "${_longName}";
  _parseCallback="${RESULT}";
  isFunctionDefined "${_parseCallback}";
  _rescode=$?;

  if isFalse ${_rescode}; then
    toLower "${_parseCallback}";
    isFunctionDefined "${RESULT}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: CLI.parseFlag flag remainingArguments
# api: private
# txt: Parses given flag.
# opt: flag: The flag to parse.
# opt: remainingArguments: The rest of the command-line flags and parameters.
# txt: Returns the number of parameters to shift.
# use: CLI.parseFlag "-f" $@;
#      echo "Must shift $?";
function CLI.parseFlag() {
  local _flag="${1}";
  checkNotEmpty flag "${_flag}" 1;
  shift;
  local -i _result=0;
  local _longName;
  local _shortName;
  local _flagKey;
  local _callbackFunction;
  local _argument;
  local -i _continue=${TRUE};

  case ${_flag} in
    --)
      _continue=${FALSE};
      ;;
  esac

  if isTrue ${_continue}; then
    if CLI.retrieveCommandLineFlagLongName "${_flag}"; then
      _longName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag ${_flag}";
    fi

    if CLI.retrieveCommandLineFlagShortName "${_flag}"; then
      _shortName="${RESULT}";
    else
      exitWithError UNKNOWN_FLAG "Unknown flag 5 ${_flag}";
    fi

    CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}";
    _flagKey="${RESULT}";

    if CLI.isFlagDefined "${_flagKey}"; then
      if CLI.parseCallbackDefinedForFlag "${_longName}"; then
        _callbackFunction="${RESULT}";
        if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
          _argument="${1}";
          _result=$((_result+1));
          "${_callbackFunction}" "${_argument}";
        else
          "${_callbackFunction}";
        fi
      else
        if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
          _argument="${1}";
          _result=$((_result+1));
        elif CLI.retrieveDefaultValueForOptionalFlag "${_flagKey}"; then
          _argument="${RESULT}";
        fi
        camelCaseToSnakeCase "${_longName}";
        normalizeUppercase "${RESULT}";
        _upcasedLongName="${RESULT}";
        declare -gx ${_upcasedLongName}="${_argument}";
      fi
    else
      exitWithError INVALID_OPTION "Unexpected flag: '${_flag}'";
    fi
  fi

  return ${_result};
}

# fun: CLI.retrieveFlagKey flag
# api: private
# txt: Retrieves the command-line flag key from given flag representation (either long or short).
# opt: flag: The flag.
# txt: Returns 0/TRUE if the flag key was found; 1/FALSE otherwise.
#      If the function returs 0/TRUE, the variable RESULT contains the flag key.
# use: if CLI.retrieveFlagKey "-f"; then
#        echo "flag key: ${RESULT}";
#      fi
function CLI.retrieveFlagKey() {
  local _flag="${1}";
  checkNotEmpty flag "${_flag}" 1;
  local -i _rescode;
  local _longName;
  local _shortName;

  if CLI.retrieveCommandLineFlagLongName "${_flag}"; then
    _longName="${RESULT}";
    if CLI.retrieveCommandLineFlagShortName "${_flag}"; then
      _shortName="${RESULT}";
      CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}";
      # implicit RESULT
      _rescode=${TRUE};
    else
      _rescode=${FALSE};
    fi
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.parseNotProvidedFlags providedFlags
# api: private
# txt: Performs the parse step for any optional flag not provided.
# opt: providedFlags: The provided flags.
# txt: Returns 0/TRUE if the process succeeds; 1/FALSE otherwise.
# use: if CLI.parseNotProvidedFlags "-f -v"; then
#        echo "Parsing not provided flags succeeded";
#      fi
function CLI.parseNotProvidedFlags() {
  local _providedFlags="${1}";

  local -a _notProvidedFlags=();
  local _flag;
  local _providedFlag;
  local _longName;
  local _upcasedLongName;
  local _flagKey;
  local -i _rescode;
  local _oldIFS="${IFS}";

  CLI.getFlagKeysVariableName;
  local -n _flagKeys="${RESULT}";

  IFS="${DWIFS}";
  for _flagKey in ${_flagKeys[@]}; do
    _provided=${FALSE};
    CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
    _longName="${RESULT}";
    CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
    _shortName="${RESULT}";
    for _providedFlag in ${_providedFlags}; do
      IFS="${_oldIFS}";
      if    areEqual "${_providedFlag}" "--${_longName}" \
         || areEqual "${_providedFlag}" "-${_shortName}"; then
        _provided=${TRUE};
        break;
      fi
    done

    IFS="${_oldIFS}";
    if isFalse ${_provided}; then
      if CLI.retrieveDefaultValueForOptionalFlag "${_flagKey}"; then
        _defaultValueDefined=${TRUE};
        _defaultValue="${RESULT}";
      fi
      if isTrue ${_defaultValueDefined}; then
        if CLI.parseCallbackDefinedForFlag "${_longName}"; then
          CLI.buildNameOfTheCallbackFunctionToParseFlag "${_longName}";
          _callbackFunction="${RESULT}";
          "${_callbackFunction}" "${_defaultValue}";
        else
          camelCaseToSnakeCase "${_longName}";
          normalizeUppercase "${RESULT}";
          _upcasedLongName="${RESULT}";
          local -n _existingVariable=${_upcasedLongName};
          if isEmpty "${_existingVariable}"; then
            declare -gx ${_upcasedLongName}="${_defaultValue}";
          fi
        fi
      fi
    fi
  done
  IFS="${_oldIFS}";

  return ${_rescode};
}

# fun: CLI.retrieveDefaultValueForOptionalFlag flagKey
# api: private
# txt: Retrieves the default value for given optional flag.
# opt: flagKey: The flag key.
# txt: Returns 0/TRUE if the default value was defined; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the default value, if it's defined.
# use: if CLI.retrieveDefalutValueForOptionalFlag "f|file"; then
#        echo "f|file -> ${RESULT}";
#      fi
function CLI.retrieveDefaultValueForOptionalFlag() {
  local _flagKey="${1}";
  checkNotEmpty flagKey "${_flagKey}" 1;
  local _result;
  local -i _rescode;

  CLI.getOptionalFlagDefaultValuesVariableName;
  local -n _optionalFlagDefaultValues=${RESULT};

  _result="${_optionalFlagDefaultValues[${_flagKey}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.buildNameOfTheCallbackFunctionToParseParameter longName
# api: private
# txt: Builds the name of the callback function used when parsing a parameter.
# opt: longName: The long name of the parameter.
# txt: Returns 0/TRUE always.
# txt: RESULT will contain the name of the callback function.
# use: CLI.buildNameOfTheCallbackFunctionToParseParameter "file";
#      echo "callback function: ${RESULT}";
function CLI.buildNameOfTheCallbackFunctionToParseParameter() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;

  export RESULT="dw_parse_${_longName}_cli_parameter";
}

# fun: CLI.parseCallbackDefinedForParameter longName
# api: private
# txt: Checks whether the callback function to parse given parameter exists.
# opt: longName: The long name of the parameter.
# txt: Returns 0/TRUE if the callback function exists; 1/FALSE otherwise.
# txt: The variable RESULT contains the parse callback function.
# use: if CLI.parseCallbackDefinedForParameter "file"; then echo "The callback function to parse 'file' parameter exists: ${RESULT}"; fi
function CLI.parseCallbackDefinedForParameter() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;

  local _parseCallback;
  local -i _rescode;

  CLI.buildNameOfTheCallbackFunctionToParseParameter "${_longName}";
  _parseCallback="${RESULT}";
  isFunctionDefined "${_parseCallback}";
  _rescode=$?;

  if isFalse ${_rescode}; then
    toLower "${_parseCallback}";
    isFunctionDefined "${RESULT}";
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: CLI.parseCommandLineParameters parameter*
# api: private
# txt: Parses the command-line parameters.
# opt: parameter: The CLI parameters.
# use: CLI.parseCommandLineParameters "/tmp/1.txt" "http://www.example.com"
function CLI.parseCommandLineParameters() {
  local _parameterName;
  local _parameterValue;
  local _parseCallback;
  local _oldIFS="${IFS}";

  CLI.getParameterNamesVariableName;
  local -n _parameterNames="${RESULT}";

  IFS="${DWIFS}";
  for _parameterName in ${_parameterNames[@]}; do
    IFS="${_oldIFS}";

    if CLI.isCommandLineParameterMultiple "${_parameterName}"; then
      _parameterValue="${@}";
      if CLI.parseCallbackDefinedForParameter "${_parameterName}"; then
        _parseCallback="${RESULT}";
        "${_parseCallback}" ${_parameterValue};
      else
        camelCaseToSnakeCase "${_parameterName}";
        normalizeUppercase "${RESULT}";
        declare -gx "${RESULT}"="${_parameterValue}";
      fi
      break;
    else
      _parameterValue="${1}";
      shift;
      if CLI.parseCallbackDefinedForParameter "${_parameterName}"; then
        _parseCallback="${RESULT}";
        "${_parseCallback}" "${_parameterValue}";
      else
        camelCaseToSnakeCase "${_parameterName}";
        normalizeUppercase "${RESULT}";
        declare -gx "${RESULT}"="${_parameterValue}";
      fi
    fi
  done
  IFS="${_oldIFS}";
}

# fun: CLI.buildCommandLineFlagKey shortName longName
# api: private
# txt: Builds a key for given command-line flag.
# opt: shortName: The short name of the flag.
# opt: longName: The long name of the flag.
# txt: Returns 0/TRUE if the key was built successfully; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the key.
# use: if CLI.buildCommandLineFlagKey "f" "file"; then
#        echo "key: ${RESULT}";
#      fi
function CLI.buildCommandLineFlagKey() {
  local _shortName="${1}";
  checkNotEmpty shortName "${_shortName}" 1;
  local _longName="${2}";
  checkNotEmpty longName "${_longName}" 2;
  local -i _rescode=${TRUE};

  export RESULT="${_shortName}|${_longName}";

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineFlagKeyFromShortName shortName
# txt: Retrieves the key of a command-line flag from its short name.
# opt: shortName: The short name of the flag.
# txt: Returns 0/TRUE if the key was built successfully; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the key.
# use: if CLI.retrieveCommandLineFlagKeyFromShortName "f"; then
#        echo "key: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagKeyFromShortName() {
  local _shortName="${1}";
  checkNotEmpty shortName "${_shortName}" 1;
  local -i _rescode=${TRUE};

  if removePrefix "${_shortName}" "-*"; then
    _shortName="${RESULT}";
  fi

  CLI.getFlagLongNamesVariableName;
  local -n _flagLongNames="${RESULT}";

  _longName="${_flagLongNames[${_shortName}]}";

  if isNotEmpty "${_longName}"; then
    if CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}"; then
      _rescode=${TRUE};
      ## RESULT is passed directly.
    else
      _rescode=${FALSE};
      export RESULT="";
    fi
  else
    _rescode=${FALSE};
    export RESULT="";
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineFlagKeyFromLongName longName
# api: private
# txt: Retrieves the key of a command-line flag from its long name.
# opt: longName: the long name of the flag.
# txt: Returns 0/TRUE if the key was built successfully; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the key.
# use: if CLI.retrieveCommandLineFlagKeyFromLongName "file"; then
#        echo "key: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagKeyFromLongName() {
  local _longName="${1}";
  checkNotEmpty longName "${_longName}" 1;
  local -i _rescode=${true};

  if removePrefix "${_longName}" "-*"; then
    _longName="${RESULT}";
  fi

  CLI.getFlagShortNamesVariableName;
  local -n _flagShortNames="${RESULT}";

  _shortName="${_flagShortNames[${_longName}]}";
  if isNotEmpty "${_shortName}"; then
    if CLI.buildCommandLineFlagKey "${_shortName}" "${_longName}"; then
      _rescode=${TRUE};
      ## RESULT is passed directly.
    else
      _rescode=${FALSE};
      export RESULT="";
    fi
  else
    _rescode=${FALSE};
    export RESULT="";
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineFlagShortNameFromKey flagKey
# api: private
# txt: Retrieves the short name of given command-line flag key.
# opt: flagKey: The key.
# txt: Returns 0/TRUE if the short name was found; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the short name.
# use: if CLI.retrieveCommandLineFlagShortNameFromKey "f|file"; then
#        echo "short name: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagShortNameFromKey() {
  local _key="${1}";
  checkNotEmpty flagKey "${_key}" 1;
  local _result;
  local -i _rescode;

  _result="${_key%%|*}";
  if areEqual "${_result}" "${_key}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineFlagLongNameFromKey flagKey
# api: private
# txt: Retrieves the long name of given command-line flag key.
# opt: flagKey: The flag key.
# txt: Returns 0/TRUE if the long name was found; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the long name.#
# use: if CLI.retrieveCommandLineFlagLongNameFromKey "f|file"; then
#        echo "long name: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagLongNameFromKey() {
  local _key="${1}";
  checkNotEmpty flagKey "${_key}" 1;

  local _result;
  local -i _rescode;

  _result="${_key##*|}";
  if areEqual "${_result}" "${_key}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineFlagDescriptionFromKey flagKey
# api: private
# txt: Retrieves the description of given command-line flag key.
# opt: flagKey: The flag key.
# txt: Returns 0/TRUE if the description was found; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the description.
# use: if CLI.retrieveCommandLineFlagDescriptionFromKey "f|file"; then
#        echo "Description: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagDescriptionFromKey() {
  local _key="${1}";
  checkNotEmpty flagKey "${_key}" 1;
  local _result;
  local -i _rescode;

  CLI.getFlagDescriptionsVariableName;
  local -n _flagDescriptions="${RESULT}";

  _result="${_flagDescriptions[${_key}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineFlagKey shortOrLongName
# api: private
# txt: Retrieves the command-line flag.
# opt: shortOrLongName: The flag (either short or long version).
# txt: Returns 0/TRUE if the flag is defined; 1/FALSE otherwise.
# use: if CLI.retrieveCommandLineFlagKey "-f"; then
#        echo "flag key for -f: ${RESULT}";
#      fi
function CLI.retrieveCommandLineFlagKey() {
  local _flag="${1}";
  checkNotEmpty shortOrLongName "${_flag}" 1;
  local -i _rescode;

  if CLI.retrieveCommandLineFlagKeyFromShortName "${_flag}"; then
    _rescode=${TRUE};
    ## RESULT gets passed through.
  elif CLI.retrieveCommandLineFlagKeyFromLongName "${_flag}"; then
    _rescode=${TRUE};
    ## RESULT gets passed through.
  else
    _rescode=${FALSE};
    export RESULT="";
  fi

  return ${_rescode};
}

# fun: CLI.isCommandLineFlagDefined shortOrLongName
# api: private
# txt: Check whether a command-line flag is defined already or not.
# opt: shortOrLongName: The flag (either short or long version).
# txt: Returns 0/TRUE if the flag is defined; 1/FALSE otherwise.
# use: if CLI.isCommandLineFlagDefined "-f"; then
#        echo "-f is already defined";
#      fi
function CLI.isCommandLineFlagDefined() {
  local _flag="${1}";
  checkNotEmpty shortOrLongName "${_flag}" 1;
  local -i _rescode;
  local _flagKey;

  if CLI.retrieveCommandLineFlagKey "${_flag}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.isCommandLineFlagMandatory flagKey
# api: private
# txt: Checks whether given flag is mandatory or not.
# opt: flagKey: The flag key.
# txt: Returns 0/TRUE if the flag is mandatory; 1/FALSE otherwise.
# use: if CLI.isCommandLineFlagMandatory ${flagKey}"; then echo "${flagKey} is mandatory"; fi
function CLI.isCommandLineFlagMandatory() {
  local _flagKey="${1}";
  checkNotEmpty flagKey "${_flagKey}" 1;
  local -i _rescode;

  CLI.getMandatoryFlagsVariableName;
  local -n _mandatoryFlags="${RESULT}";

  _value="${_mandatoryFlags[${_flagKey}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "${MANDATORY}" \
     || areEqual "${_value}" "MANDATORY"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.doesCommandLineFlagExpectArgument flagKey
# api: private
# txt: Checks whether given flag expects an argument.
# opt: flagKey: The flag key.
# txt: 0/TRUE if the flag expects an argument; 1/FALSE otherwise.
# use: if CLI.doesCommandLineFlagExpectArgument ${flagKey}"; then
#        echo "${flagKey} expects an argument";
#      fi
function CLI.doesCommandLineFlagExpectArgument() {
  local _flagKey="${1}";
  checkNotEmpty flagKey "${_flagKey}" 1;
  local -i _rescode;

  CLI.getFlagExpectingArgumentsVariableName;
  local -n _flagExpectingArguments="${RESULT}";

  _value="${_flagExpectingArguments[${_flagKey}]}";

  if     isEmpty "${_value}" \
      || isTrue "${_value}" \
      || areEqual "${_value}" "${EXPECTS_ARGUMENT}" \
      || areEqual "${_value}" "EXPECTS_ARGUMENT"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.retrieveCommandLineParameterDescriptionFromName paramName
# api: private
# txt: Retrieves the description of given command-line parameter.
# opt: paramName: The name.
# txt: Returns 0/TRUE if the description was found; 1/FALSE otherwise.
#      If the function returns 0/TRUE, the variable RESULT contains the description.
# use: if CLI.retrieveCommandLineParameterDescriptionFromName "project"; then
#        echo "Description: ${RESULT}";
#      fi
function CLI.retrieveCommandLineParameterDescriptionFromName() {
  local _name="${1}";
  checkNotEmpty paramName "${_name}" 1;
  local _result;
  local -i _rescode;

  CLI.getParameterDescriptionsVariableName;
  local -n _parameterDescriptions="${RESULT}";

  _result="${_parameterDescriptions[${_name}]}";
  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: CLI.isCommandLineParameterMandatory paramName
# api: private
# txt: Checks whether given parameter is mandatory or not.
# opt: paramName: The parameter name.
# txt: Returns 0/TRUE if the parameter is mandatory; 1/FALSE otherwise.
# use: if CLI.isCommandLineParameterMandatory "file"; then
#        echo "file is mandatory";
#      fi
function CLI.isCommandLineParameterMandatory() {
  local _name="${1}";
  checkNotEmpty paramName "${_name}" 1;
  local -i _rescode;

  CLI.getMandatoryParametersVariableName;
  local -n _mandatoryParameters="${RESULT}";

  _value="${_mandatoryParameters[${_name}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "MANDATORY"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.isCommandLineParameterSingle paramName
# api: private
# txt: Checks whether given parameter is single or not.
# opt: paramName: The parameter name.
# txt: Returns 0/TRUE if the parameter only expects a single value; 1/FALSE otherwise.
# use: if CLI.isCommandLineParameterSingle "file"; then
#        echo "file accepts only one value";
#      fi
function CLI.isCommandLineParameterSingle() {
  local _name="${1}";
  checkNotEmpty paramName "${_name}" 1;
  local -i _rescode;

  CLI.getSingleParametersVariableName;
  local -n _singleParameters="${RESULT}";
  _value="${_singleParameters[${_name}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "SINGLE"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.isCommandLineParameterMultiple paramName
# api: private
# txt: Checks whether given parameter is multiple or not.
# opt: paramName: The parameter name.
# txt: Returns 0/TRUE if the parameter allows multiple values; 1/FALSE otherwise.
# use: if CLI.isCommandLineParameterMultiple "file"; then
#        echo "file can accept multiple values";
#      fi
function CLI.isCommandLineParameterMultiple() {
  local _name="${1}";
  checkNotEmpty paramName "${_name}" 1;
  local -i _rescode;

  if CLI.isCommandLineParameterSingle "${_name}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: CLI.commandLineFlagsUsage
# api: private
# txt: Prints a line describing how to run the script.
#      Returns 0/TRUE if this function printed anything; 1/FALSE otherwise.
# use: if CLI.commandLineFlagsUsage then ... fi
function CLI.commandLineFlagsUsage() {
  local -i _rescode=${TRUE};
  DW.getScriptName;
  local _message="${RESULT}";
  local _flagKey;
  local _shortName;
  local _longName;
  local _oldIFS="${IFS}";
  local _mandatory;
  IFS=$' \t\n';

  CLI.getFlagKeysVariableName;
  local -n _flagKeys="${RESULT}";

  for _flagKey in ${_flagKeys[@]}; do
    IFS="${_oldIFS}";
    CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
    _shortName="${RESULT}";
    CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
    _longName="${RESULT}";
    _message="${_message} ";
    CLI.isCommandLineFlagMandatory "${_flagKey}";
    _mandatory=$?;
    if isFalse ${_mandatory}; then
      _message="${_message}[";
    fi
    _message="${_message}-${_shortName}|--${_longName}";
    if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
      _message="${_message} arg";
    fi
    if isFalse ${_mandatory}; then
      _message="${_message}]";
    fi
  done
  IFS="${_oldIFS}";

  echo -n "${_message}";

  return ${_rescode};
}

# fun: CLI.scriptDescriptionUsage
# api: private
# txt: Conditionally prints (to stdout) a line with the script description.
#      Returns 0/TRUE if this function printed anything; 1/FALSE otherwise.
# use: if CLI.scriptDescriptionUsage then ... fi
function CLI.scriptDescriptionUsage() {
  local -i _rescode;

  getScriptDescription;
  local _scriptDescription="${RESULT}";

  if isEmpty "${_scriptDescription}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -e "\n${_scriptDescription}\n";
  fi

  return ${_rescode};
}

# fun: CLI.scriptLicenseSummaryUsage
# api: private
# txt: Conditionally prints (to stdout) a line with the license summary.
#      Returns 0/TRUE if this function printed anything; 1/FALSE otherwise.
# use: if CLI.scriptLicenseSummaryUsage then ... fi
function CLI.scriptLicenseSummaryUsage() {
  local -i _rescode;

  getScriptLicenseSummary;
  local _scriptLicenseSummary="${RESULT}";

  if isEmpty "${_scriptLicenseSummary}"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
    echo "${_scriptLicenseSummary}";
  fi

  return ${_rescode};
}

# fun: CLI.scriptCopyrightUsage
# api: private
# txt: Conditionally prints (to stdout) a line with the copyright.
#      Returns 0/TRUE if this function printed anything; 1/FALSE otherwise.
# use: if CLI.scriptCopyrightUsage then ... fi
function CLI.scriptCopyrightUsage() {
  local -i _rescode;

  getScriptCopyright;
  local _scriptCopyright="${RESULT}";

  if isEmpty "${_scriptCopyright}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo "${_scriptCopyright}";
  fi

  return ${_rescode};
}

# fun: CLI.commandLineFlagsDetailedUsage
# api: private
# txt: Prints a line describing the details of the command-line flags.
#      Returns 0/TRUE if this function printed anything; 1/FALSE otherwise.
# use: if CLI.commandLineFlagsDetailedUsage then ... fi
function CLI.commandLineFlagsDetailedUsage() {
  local -i _rescode;
  local _message;
  local _flagKey;
  local _shortName;
  local _longName;
  local _description;
  local _oldIFS="${IFS}";
  IFS=$' \t\n';

  CLI.getFlagKeysVariableName;
  local -n _flagKeys="${RESULT}";

  for _flagKey in ${_flagKeys[@]}; do
    IFS="${_oldIFS}";
    CLI.retrieveCommandLineFlagShortNameFromKey "${_flagKey}";
    _shortName="${RESULT}";
    CLI.retrieveCommandLineFlagLongNameFromKey "${_flagKey}";
    _longName="${RESULT}";
    CLI.retrieveCommandLineFlagDescriptionFromKey "${_flagKey}";
    _description="${RESULT}";
    _message="${_message}  * -${_shortName}|--${_longName}";
    if CLI.doesCommandLineFlagExpectArgument "${_flagKey}"; then
      _message="${_message} arg";
    fi
    _message="${_message}: ${_description}.";
    if CLI.isCommandLineFlagMandatory "${_flagKey}"; then
      _message="${_message} Mandatory.\n";
    else
      _message="${_message} Optional.\n";
    fi
  done
  IFS="${_oldIFS}";

  if isEmpty "${_message}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -n -e "${_message}";
  fi

  return ${_rescode};
}

# fun: CLI.commandLineParameterIsSingle paramName
# api: private
# txt: Checks whether given parameter is single or not.
# opt: paramName: The parameter name.
# txt: Returns 0/TRUE if the parameter is single; 1/FALSE otherwise.
# use: if CLI.commandLineParameterIsSingle ${name}"; then
#        echo "${name} is multiple";
#      fi
function CLI.commandLineParameterIsSingle() {
  local _name="${1}";
  checkNotEmpty paramName "${_name}" 1;
  local -i _rescode;

  CLI.getSingleParametersVariableName;
  local -n _singleParameters="${RESULT}";

  _value="${_singleParameters[${_name}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "SINGLE"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.commandLineParameterIsMultiple paramName
# api: private
# txt: Checks whether given parameter is multiple or not.
# opt: paramName: The parameter name.
# txt: Returns 0/TRUE if the parameter is multiple; 1/FALSE otherwise.
# use: if CLI.commandLineParameterIsMultiple ${name}"; then
#        echo "${name} is multiple";
#      fi
function CLI.commandLineParameterIsMultiple() {
  local _name="${1}";
  checkNotEmpty paramName "${_name}" 1;
  local -i _rescode;

  if CLI.commandLineParameterIsSingle "${_name}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: CLI.commandLineParameterIsMandatory paramName
# api: private
# txt: Checks whether given parameter is mandatory or not.
# opt: paramName: The parameter name.
# txt: Returns 0/TRUE if the parameter is mandatory; 1/FALSE otherwise.
# use: if CLI.commandLineParameterIsMandatory ${name}"; then
#        echo "${name} is mandatory";
#      fi
function CLI.commandLineParameterIsMandatory() {
  local _name="${1}";
  checkNotEmpty paramName "${_name}" 1;
  local -i _rescode;

  CLI.getMandatoryParametersVariableName;
  local -n _mandatoryParameters="${RESULT}";

  _value="${_mandatoryParameters[${_name}]}";

  if    isEmpty "${_value}" \
     || isTrue "${_value}" \
     || areEqual "${_value}" "MANDATORY"; then
    _rescode=${TRUE};
  else
    _rescode=${FALSE};
  fi

  return ${_rescode};
}

# fun: CLI.commandLineParametersUsage
# api: private
# txt: Prints a line describing the script's flags.
#      Returns 0/TRUE if this function printed anything; 1/FALSE otherwise.
# use: if CLI.commandLineParametersUsage then ... fi
function CLI.commandLineParametersUsage() {
  local -i _rescode;
  local _message;
  local _name;
  local _oldIFS="${IFS}";
  local _mandatory;
  IFS=$' \t\n';

  CLI.getParameterNamesVariableName;
  local -n _parameterNames="${RESULT}";

  for _name in ${_parameterNames[@]}; do
    IFS="${_oldIFS}";
    _message="${_message} ${_name}";
    if CLI.commandLineParameterIsMultiple "${_name}"; then
      if CLI.isCommandLineParameterMandatory "${_name}"; then
        _message="${_message}+";
      else
        _message="${_message}*";
      fi
    fi
  done
  IFS="${_oldIFS}";

  if isEmpty "${_message}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -e "${_message}";
  fi

  return ${_rescode};
}

# fun: CLI.commandLineParametersDetailedUsage
# api: private
# txt: Prints a line describing the details of the command-line parameters.
#      Returns 0/TRUE if this function printed anything; 1/FALSE otherwise.
# use: if CLI.commandLineParametersDetailedUsage then ... fi
function CLI.commandLineParametersDetailedUsage() {
  local -i _rescode;
  local _message;
  local _name;
  local _description;
  local _oldIFS="${IFS}";
  IFS=$' \t\n';

  CLI.getParameterNamesVariableName;
  local -n _parameterNames="${RESULT}";

  for _name in ${_parameterNames[@]}; do
    IFS="${_oldIFS}";
    if isNotEmpty "${_message}"; then
      _message="\n";
    fi
    CLI.retrieveCommandLineParameterDescriptionFromName "${_name}";
    _description="${RESULT}";
    _message="${_message}  * ${_name}";
    if CLI.commandLineParameterIsMultiple "${_name}"; then
      _message="${_message}*";
    fi
    _message="${_message}: ${_description}.";
    if CLI.commandLineParameterIsMandatory "${_name}"; then
      _message="${_message} Mandatory.";
    else
      _message="${_message} Optional.";
    fi
  done
  IFS="${_oldIFS}";

  if isEmpty "${_message}"; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
    echo -e "${_message}";
  fi

  return ${_rescode};
}

# fun: printHelp
# api: public
# txt: Prints the help message.
# txt: Returns 0/TRUE always.
# use: printHelp;
function printHelp() {

  DW.getScriptName;
  local _scriptName="${RESULT}";
  if isFunctionPresent defineEnv "${_scriptName}"; then
    defineEnv;
  fi
  usage;
  printEnvironment;
  printExitValues;
}

# fun: printUsage
# api: public
# txt: Prints the usage message.
# txt: Returns 0/TRUE always.
# use: printUsage;
function printUsage() {
  printHelp >&2
}

# fun: CLI.checkMandatoryOrOptional paramValue paramIndex
# api: private
# txt: Performs a precondition check on given parameter to ensure it's either MANDATORY or OPTIONAL.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: CLI.checkMandatoryOrOptional "${mandatoryOrOptional}" 1 # -> throws an error if the first (1) parameter ("paramValue") is neither MANDATORY or OPTIONAL.
function CLI.checkMandatoryOrOptional() {
  local _value="${1}";
  checkNotEmpty paramValue "${_value}" 1;
  local _index="${2}";
  checkNotEmpty paramIndex "${_index}" 2;

  CHECK.checkOneOf 1 "MANDATORY|OPTIONAL" "${_value}" "MANDATORY OPTIONAL" "${_index}";
}

# fun: CLI.checkSingleOrMultiple paramValue paramIndex
# api: private
# txt: Performs a precondition check on given parameter to ensure it's either SINGLE or MULTIPLE.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: CLI.checkSingleOrMultiple "${singleOrMultiple}" 1 # -> throws an error if the first (1) parameter ("${paramValue}") is neither SINGLE or MULTIPLE.
function CLI.checkSingleOrMultiple() {
  local _value="${1}";
  checkNotEmpty paramValue "${_value}" 1;
  local _index="${2}";
  checkNotEmpty paramIndex "${_index}" 2;

  CHECK.checkOneOf 1 "SINGLE|MULTIPLE" "${_value}" "SINGLE MULTIPLE" "${_index}";
}

# fun: CLI.checkExpectsArgumentOrNoArgument paramValue paramIndex
# api: private
# txt: Performs a precondition check on given parameter to ensure it's either EXPECTS_ARGUMENT or NO_ARGUMENT.
# opt: paramValue: The parameter value.
# opt: paramIndex: The parameter index.
# txt: Exits if the check fails; otherwise returns 0/TRUE.
# use: CLI.checkExpectsArgumentOrNoArgument "${expectsArgumentOrNoArgument}" 1 # -> throws an error if the first (1) parameter ("${paramValue}") is neither EXPECTS_ARGUMENT or NO_ARGUMENT.
function CLI.checkExpectsArgumentOrNoArgument() {
  local _value="${1}";
  checkNotEmpty paramValue "${_value}" 1;
  local _index="${2}";
  checkNotEmpty paramIndex "${_index}" 2;

  CHECK.checkOneOf 1 "EXPECTS_ARGUMENT|NO_ARGUMENT" "${_value}" "EXPECTS_ARGUMENT NO_ARGUMENT" "${_index}";
}

# fun: CLI.defaultState
# api: private
# txt: Sets up the default state.
#      Returns 0/TRUE always.
# use: CLI.defaultState
function CLI.defaultState() {
  ## Built-in flags.
  addCommandLineFlag "debug" "v" "Display debug messages" OPTIONAL NO_ARGUMENT;
  addCommandLineFlag "trace" "vv" "Display trace messages" OPTIONAL NO_ARGUMENT;
  addCommandLineFlag "quiet" "q" "Be silent" OPTIONAL NO_ARGUMENT;
  addCommandLineFlag "help" "h" "Display information about how to use the script" OPTIONAL NO_ARGUMENT;
}

# fun: CLI.resetState
# api: private
# txt: Resets the module state.
# txt: Returns 0/TRUE always.
# use: CLI.resetState
function CLI.resetState() {
  CLI.getModuleName;
  local _moduleName="${RESULT}";

  # env: FLAG_KEYS: The CLI flags' keys.
  DW.declareGlobalArray "${_moduleName}" FLAG_KEYS;
  # env: FLAG_LONG_NAMES: The CLI flags' long names.
  DW.declareGlobalMap "${_moduleName}" FLAG_LONG_NAMES;
  # env: FLAG_SHORT_NAMES: The CLI flags' short names.
  DW.declareGlobalMap "${_moduleName}" FLAG_SHORT_NAMES;
  # env: MANDATORY_FLAGS: The CLI flags' mandatory information.
  DW.declareGlobalMap "${_moduleName}" MANDATORY_FLAGS;
  # env: FLAG_EXPECTING_ARGUMENTS: Whether each CLI flag expects an argument or not.
  DW.declareGlobalMap "${_moduleName}" FLAG_EXPECTING_ARGUMENTS;
  # env: FLAG_DESCRIPTIONS: The description of each CLI flag.
  DW.declareGlobalMap "${_moduleName}" FLAG_DESCRIPTIONS;
  # env: OPTIONAL_FLAG_DEFAULT_VALUES: The default value of each CLI flag.
  DW.declareGlobalMap "${_moduleName}" OPTIONAL_FLAG_DEFAULT_VALUES;
  # env: PARAMETER_NAMES: The names of the CLI parameters.
  DW.declareGlobalArray "${_moduleName}" PARAMETER_NAMES;
  # env: PARAMETER_DESCRIPTIONS: The descriptions of the CLI parameters.
  DW.declareGlobalMap "${_moduleName}" PARAMETER_DESCRIPTIONS;
  # env: MANDATORY_PARAMETERS: Whether each CLI parameter is mandatory or not.
  DW.declareGlobalMap "${_moduleName}" MANDATORY_PARAMETERS;
  # env: SINGLE_PARAMETERS: Whether each CLI parameter is single or not.
  DW.declareGlobalMap "${_moduleName}" SINGLE_PARAMETERS;

  # env: HELP_FLAG_PROVIDED: Whether the help flag was provided.
  DW.declareGlobalInt "${_moduleName}" HELP_FLAG_PROVIDED ${FALSE};

  # env: SCRIPT_DESCRIPTION: The description of the script.
  DW.declareGlobalString "${_moduleName}" SCRIPT_DESCRIPTION;
  # env: SCRIPT_COPYRIGHT: The copyright of the script.
  DW.declareGlobalString "${_moduleName}" SCRIPT_COPYRIGHT;
  # env: SCRIPT_LICENSE_SUMMARY: The license of the script.
  DW.declareGlobalString "${_moduleName}" SCRIPT_LICENSE_SUMMARY;
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
