# mod: debug
# api: public
# txt: Functions to help while debugging scripts.

# fun: DEBUG.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: DEBUG.getModuleName; echo "Module: ${RESULT}";
function DEBUG.getModuleName() {
  export RESULT="DEBUG";
  return ${TRUE};
}

# fun: debugArray arrayName
# api: public
# txt: Prints the contents of given array.
# opt: arrayName: The name of the array.
# txt: Returns 0/TRUE always.
# use: A=( "1" "2" "3" );
# use: debugArray "${A}"
function debugArray() {
  checkNotEmpty arrayName "${1}" 1;
  flattenArray "${1}" " + ";
  debugEcho "${RESULT}";
}

# fun: debugAssociativeArray arrayName
# api: public
# txt: Prints the contents of given associative array.
# opt: arrayName: The name of the associative array.
# txt: Returns 0/TRUE always.
# use: A=( [foo]=bar [other key]="other value" );
# use: debugArray "${A}"
function debugAssociativeArray() {
  local _associativeArrayName="${1}";
  checkNotEmpty arrayName "${_associativeArrayName}" 1;

  debugEcho "BEGIN processing array ${_associativeArrayName}";

  forEachAssociativeArrayEntryDo "${_associativeArrayName}" debugAssociativeArrayEntry;

  debugEcho "DONE processing array ${_associativeArrayName}";
}

# fun: debugAssociativeArrayEntry key value
# api: public
# txt: Callback to be called to debug a specific entry in an associative array.
# opt: key: The entry key. Mandatory.
# opt: value: The entry value. Could be empty.
# txt: Returns 0/TRUE always.
# use: forEachAssociativeArrayEntryDo MY_ASSOCIATIVE_ARRAY debugAssociativeArrayEntry; done
function debugAssociativeArrayEntry() {
  local _key="${1}";
  checkNotEmpty key "${_key}" 1;
  local _value="${2}";

  debugEcho "${_key} -> ${_value}";
}

# fun: debugEcho message
# api: public
# txt: Echoes a line to the debug log file. Useful for locating them easily when debugging.
# opt: message: The message to print.
# txt: Returns 0/TRUE always.
# use: debugEcho "message";
function debugEcho() {
  if isDebugEchoEnabled; then
    DEBUG.getDebugLogFile;
    local _logFile="${RESULT}";
    if isNotEmpty "${_logFile}"; then
      echo "$*" >> "${_logFile}";
    fi
  fi
}

# fun: debugVariable varName varValue+
# api: public
# txt: Tries to declare a variable with given arguments.
# opt: varName: The variable name.
# opt: varValue: The variable value(s).
# txt: Returns 0/TRUE always.
# use: debugVariable "foo" "bar";
function debugVariable() {
  local _name="${1}";
  checkNotEmpty varName "${_name}" 1;

  shift;
  local _value="${@}";

  declare -t "${_name}"="${_value}";
  #  trap "echo ${_name} is being used here." DEBUG
}

# fun: isDebugEchoEnabled
# api: public
# txt: Retrieves whether "debugEcho" is enabled.
# txt: Returns  0/TRUE if it's enabled; 1/FALSE otherwise.
# use: if isDebugEchoEnabled; then ...; fi
function isDebugEchoEnabled() {
  DEBUG.getModuleName;
  DW.getGlobalInt "${RESULT}" ECHO_ENABLED;
  local -i _rescode=${RESULT};

  return ${_rescode};
}

# fun: setDebugEchoEnabled bool
# api: public
# txt: Specifies whether "debugEcho" is enabled.
# opt: bool: That condition.
# txt: Returns 0/TRUE always.
# use: setDebugEchoEnabled TRUE;
function setDebugEchoEnabled() {
  local _flag="${1}";
  checkBoolean bool "${_flag}" 1;

  DEBUG.getModuleName;
  local _moduleName="${RESULT}";

  if isTrue "${_flag}"; then
    if ! isDebugEnabled; then
      DW.setGlobalInt "${_moduleName}" ECHO_ENABLED ${TRUE};

      DEBUG.getDebugLogFile;
      logTrace -n "Logging debugging information to ${RESULT}";
      logTraceResult SUCCESS "done";
    fi
  else
    DW.setGlobalInt "${_moduleName}" ECHO_ENABLED ${FALSE};
  fi
}

# fun: setDebugLogFile fileName
# api: public
# txt: Specifies the log file for debugging purposes.
# opt: fileName: The log file.
# txt: Returns 0/TRUE if the log file can be used for writing; 1/FALSE otherwise.
# use: setDebugLogFile "/tmp/.dw-debug.log";
function setDebugLogFile() {
  local _file="${1}";
  checkNotEmpty fileName "${_file}" 1;

  local -i _rescode=${TRUE};

  if isNotEmpty "${_file}"; then
    mkdir -p "$(dirname "${_file}")";
    touch "${_file}";
    _rescode=$?;
  fi

  if isTrue ${_rescode}; then
    DEBUG.getDebugLogFile;
    local _logFile="${RESULT}";

#    echo "old log file: ${_logFile}, new log file: ${_file}";
    if [[ "${_file}" != "${_logFile}" ]]; then
      DEBUG.getModuleName;
      DW.setGlobalString "${RESULT}" LOG_FILE "${_file}";
    fi
  fi

  return ${_rescode};
}

# fun: traceApiCall
# api: public
# txt: Traces the API call to the default log file using in development.
# txt: Returns 0/TRUE always.
# use: traceApiCall;
function traceApiCall() {
  DEBUG.getDebugLogFile;
  local _logFile="${RESULT}";
  if isNotEmpty "${_logFile}"; then
    printApiCall >> "${_logFile}";
  fi
}

# fun: printApiCall parentArgs*
# api: public
# txt: Prints the API call to the default log file using in development.
# txt: parentArgs: The arguments passed to the parent function. Optional.
# txt: Returns 0/TRUE always.
# use: printApiCall $*;
function printApiCall() {
  local -i _i=1;

  echo "${FUNCNAME[1]} $* $(caller 0)";
  while caller ${_i}; do
    _i=$((_i+1))
  done
}

# fun: DEBUG.getDebugLogFile
# api: private
# txt: Retrieves the log file for debugging purposes.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the path of the debug file.
# use: DEBUG.getDebugLogFile; echo "log file -> ${RESULT}";
function DEBUG.getDebugLogFile() {
  DEBUG.getModuleName;
  DW.getGlobalString "${RESULT}" LOG_FILE;
}

# fun: DEBUG.defaultState
# api: private
# txt: Reverts the module to the default state.
# txt: Returns 0/TRUE always.
# use: DEBUG.defaultState;
function DEBUG.defaultState() {
  local _scriptName;
  if DW.getScriptName; then
    _scriptName="${RESULT}";
  fi
  if isEmpty "${_scriptName}"; then
    _scriptName="drywit";
  fi
  setDebugLogFile "${TEMP:-/tmp}/$(basename ${_scriptName})-debug.$(date '+%Y%m%d%H%M%S').log";
  setDebugEchoEnabled ${FALSE};
}

# fun: debugDuration command*
# api: public
# txt: Runs a function or a command and prints the elapsed time in the debug log.
# opt: command*: The command or function.
# txt: Returns whatever the command or function does return.
# use: debugDuration ls -l /
function debugDuration() {
  local -i _rescode;

  if isDebugEchoEnabled; then
    checkNotEmpty commandOrFunction "$@" 1;
    local _start=$(date +%s.%N);
    $@;
    _rescode=$?;
    local _end=$(date +%s.%N);
    local _dt=$(echo "${_end} - ${_start}" | bc);
    local -i _dd=$(echo "${_dt}/86400" | bc);
    local _dt2=$(echo "${_dt}-86400*${_dd}" | bc);
    local -i _dh=$(echo "${_dt2}/3600" | bc);
    local _dt3=$(echo "${_dt2}-3600*${_dh}" | bc);
    local -i _dm=$(echo "${_dt3}/60" | bc);
    local _ds=$(echo "${_dt3}-60*${_dm}" | bc);

    debugEcho "$(printf "$@ took %d:%02d:%02d:%02.4f and returned %d\n" ${_dd} ${_dh} ${_dm} ${_ds} ${_rescode})";
  else
    $@;
    _rescode=$?;
  fi

  return ${_rescode};
}

# fun: DEBUG.resetState
# api: private
# txt: Resets the module state.
# txt: Returns 0/TRUE always.
# use: DEBUG.resetState
function DEBUG.resetState() {
  DEBUG.getModuleName;
  local _moduleName="${RESULT}";

  # env: LOG_FILE: The log file where the debug stuff gets logged.
  DW.declareGlobalString "${_moduleName}" LOG_FILE "";

  # env: ECHO_ENABLED: Whether debugEcho is enabled.
  DW.declareGlobalInt "${_moduleName}" ECHO_ENABLED ${FALSE};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
