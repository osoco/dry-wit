# mod: term
# api: public
# txt: Terminal-related functions

# fun: TERM.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: TERM.getModuleName; echo "Module: ${RESULT}";
function TERM.getModuleName() {
  export RESULT="TERM";
  return ${TRUE};
}

# fun: getTermWidth
# api: public
# txt: Retrieves the width of the term.
# txt: Returns 0/TRUE if the term width was retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the term width.
# use: if getTermWidth; then echo "term width -> ${RESULT}"; fi
function getTermWidth() {
  local -i _rescode;

  TERM.retrieveTermWidthFromEnvVar;
  _rescode=$?;
  if isFalse ${_rescode}; then
    retrieveTERM;
    local _term="${RESULT}";
    getTermWidthForTerm "${_term}";
    _rescode=$?;
    if isFalse ${_rescode}; then
      export RESULT="";
    fi
  fi

  return ${_rescode};
}

# fun: getTermWidthForTerm term
# api: public
# txt: Retrieves the width of the term.
# opt: term: the TERM value.
# txt: Returns 0/TRUE if the term width was retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the term width.
# use: if getTermWidthForTerm "${TERM}"; then ...; fi
function getTermWidthForTerm() {
  local _term="${1}";
  checkNotEmpty term "${_term}" 1;
  local -i _rescode;
  local _result;

  $(tput cols &> /dev/null > /dev/null 2>&1);
  _rescode=$?;

  if isTrue ${_rescode}; then
    _result=$(tput cols);
  fi

  if    isEmpty ${_result} \
     || isLessOrEqualTo  ${_result} 0; then

    if isNotEmpty "${_term}"; then

      $(tput -T ${_term} cols > /dev/null 2>&1);

      if isTrue ${_rescode}; then
        _result=$(tput -T ${_term} cols);
      fi
    fi
  fi

  if   isEmpty ${_result} \
    || isLessOrEqualTo  ${_result} 0; then
    TERM.getModuleName;
    DW.getGlobalInt "${RESULT}" DEFAULT_TERM_WIDTH;
    _result=${RESULT};
  fi

  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  fi

if isTrue ${_rescode}; then
    export RESULT=${_result};
  fi

  return ${_rescode};
}

# fun: retrieveTERM
# api: public
# txt: Retrieves the TERM variable
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the TERM variable.
# use: retrieveTERM;
#      echo "TERM -> ${RESULT}";
function retrieveTERM() {
  local _result="${TERM}";

  if isEmpty "${_result}"; then
    _result="dumb";
  fi

  case ${_result} in
    dumb) _result="$(uname | tr '[:upper:]' '[:lower:]')";
          ;;
    *) ;;
  esac

  export RESULT="${_result}";

  return ${TRUE};
}

# fun: TERM.retrieveTermWidthFromEnvVar
# api: private
# txt: Retrieves the column width, from an environment variable.
# txt: Returns 0/TRUE if the term width is specified via an environment variable; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the column width.
# use: if retrieveTermWidthFromEnvVar; then width=${RESULT}; fi
function TERM.retrieveTermWidthFromEnvVar() {
  local -i _rescode=${FALSE};

  if isNotEmpty "${DW_TERM_WIDTH}"; then
    _rescode=${TRUE};
    export RESULT="${DW_TERM_WIDTH}";
  fi

  return ${_rescode};
}

# fun: TERM.resetState
# api: private
# txt: Initializes the module state.
# txt: Returns 0/TRUE always.
# use: TERM.resetState
function TERM.resetState() {
  TERM.getModuleName;
  local _moduleName="${RESULT}";

  DW.declareGlobalInt "${_moduleName}" DEFAULT_TERM_WIDTH 80;

  # env: DW_TERM_WIDTH: An environment variable to override default term width.
  defineEnvVar DW_TERM_WIDTH OPTIONAL "An environment variable to override default term width";
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
