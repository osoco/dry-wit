# mod: ssh
# api: public
# txt: SSH-related functions.

# fun: remoteSshCommand user server command*
# api: public
# txt: Runs a command in a remote server, via SSH.
# opt: user: The user name.
# opt: server: The remote server.
# opt: command: The command to run.
# txt: Returns the result code of the command.
# txt: If the function returns 0/TRUE; then the variable RESULT contains the output of the command.
# use: if remoteSshCommand user ssh.example.com "who"; then
# use:   echo "Remote logged users: ${RESULT}";
# use: fi
function remoteSshCommand() {
  local _user="$1";
  checkNotEmpty user "${_user}" 1;
  local _server="$2";
  checkNotEmpty server "${_server}" 2;
  local _command="$*";
  checkNotEmpty command "${_command}" 3;

  local _result;
  _result="$(ssh ${_user}@${_server} "${_command}" 2>&1)";
  local -i _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export ERROR="${_result}";
  fi

  return ${_rescode};
}

# fun: remoteSshCommandPipe user server command previousPipe
# api: public
# txt: Pipes through a command in a remote server, via SSH.
# opt: user: The user name.
# opt: server: The remote server.
# opt: command: The command to run in the remote server.
# opt: previousPipe: The pipe to read from, which is piped to the remote command.
# txt: Returns the result code of the remote command.
# txt: If the function returns 0/TRUE; then the variable RESULT contains the output of the command.
# use: if remoteSshCommandPipe user ssh.example.com "tar -cvfz - /www" "cat > www.tar.gz"; then
# use:   ...
# use: fi
function remoteSshCommandPipe() {
  local _user="$1";
  checkNotEmpty user "${_user}" 1;
  local _server="$2";
  checkNotEmpty server "${_server}" 2;
  local _command="$*";
  checkNotEmpty command "${_command}" 3;
  shift;
  shift;
  shift;
  local _previousPipe="$@";
  checkNotEmpty previousPipe "${_previousPipe}" 4;
  local _line;

#  echo "_previousPipe=${_previousPipe}";
#  echo "_command=${_command}";
  local _result;
  _result=$(${_previousPipe} | while IFS='' read -r _line; do echo ${line} | ssh "${_user}@${_server}" "${_command}"; done);
  local -i _rescode=${TRUE};
  if contains "${_result}" "ssh: "; then
    _rescode=${FALSE};
  else
    _rescode=${TRUE};
  fi
  rescode=$?;
  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export ERROR="${_result}";
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
