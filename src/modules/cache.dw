# mod: cache
# api: public
# txt: Memoization support.
# txt: Adapted from http://unix.stackexchange.com/questions/38101/does-bash-have-a-built-in-caching-command-available-sort-of-like-mktemp-or-spon
typeset -A result_cache;
typeset -A rescode_cache;

# fun: cache function functionArguments
# api: public
# txt: Memoizes a function call: Annotates its output, to speed up future invocations.
# opt: function: the name of the function to call.
# opt: functionArguments: the arguments of the function.
# txt: Returns the result of the function call.
# use: cache findPrimeNumbers 100000 # takes a long time
#      cache findPrimeNumbers 100000 # returns instantly
function cache() {
  local _key="$*";
  checkNotEmpty function "${_key}" 1;
  local -i _rescode;
  local _result;
  local _cachedRescode=${rescode_cache["${_key}"]:--1};

  if [ ${_cachedRescode} -lt 0 ]; then
    ${_key};
    _rescode=$?;
    _result="${RESULT}";
    result_cache["${_key}"]="${_result}";
    _result="${result_cache[${_key}]}";
    rescode_cache["${_key}"]=${_rescode};
  else
    _rescode=${rescode_cache["${_key}"]};
    _result="${result_cache[${_key}]}";
  fi

  export RESULT="${_result}";

  return ${_rescode};
}

# fun: uncache function functionArguments
# api: public
# txt: Discards previous memoized values for a function call.
# opt: function: the name of the function..
# opt: functionArguments: the arguments of the function.
# txt: Returns 0/TRUE always.
# use: uncache findPrimeNumbers 100000
function uncache() {
  unset result_cache["$*"];
  unset rescode_cache["$*"];
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
