# mod: command
# api: public
# txt: Functions to run external commands.

# fun: runCommand command
# api: public
# txt: Runs a command supporting logging of command-line and output.
# opt: command: The command to run.
# txt: Returns the result of the command.
# txt: The output is stored in the variable RESULT. If it's expected to be longer use 'runCommandLongOutput' instead.
# use: if runCommand "nmap -Pn"; then ...; fi
function runCommand() {
  local _command="$(echo $@ | sed 's_\n_ _g')";
  checkNotEmpty command "${_command}" 1;
  local result;
  local -i resultCode;

  getLogCategory;
  local _previousLogCategory="${RESULT}";
  setLogCategory "${_previousLogCategory}:($1)";

  logDebug "${_command}";
  result=$($@ 2>&1);
  resultCode=$?;

  export RESULT="${result}";

  setLogCategory "${_previousLogCategory}";

  return ${resultCode};
}

# fun: runCommandAsUidGid uid gid folder command+
# api: public
# txt: Runs a command in a folder, under a given user.
# opt: uid: The user id.
# opt: gid: The group id.
# opt: folder: the folder.
# opt: command: the command.
# txt: Returns the result of the command.
# use: if runCommandAsUidGid 1000 100 /tmp "ls -ltrhia"; then
#        echo "ls -ltrhia run successfully as uid 1000, gid 100, on /tmp";
#      fi
function runCommandAsUidGid() {
  local _uid="${1}";
  checkNotEmpty uid "${_uid}" 1;
  local _gid="${2}";
  checkNotEmpty gid "${_gid}" 2;
  local _folder="${3}";
  checkNotEmpty folder "${_folder}" 3;
  local _command="${4}";
  checkNotEmpty command "${_command}" 4;
  shift
  shift
  shift
  shift
  local _user;
  local _group;

  DW.import user;
  retrieveUserFromUid "${_uid}";
  _user="${RESULT}";
  retrieveGroupFromGid "${_gid}";
  _group="${RESULT}";

  runCommandAsUserAndGroup "${_user}" "${_group}" "${_folder}" "${_command}" ${@};
}

# fun: runCommandAsUserAndGroup user group folder command+
# api: public
# txt: Runs the command in a folder, under a given user.
# opt: user: The user.
# opt: group: The group.
# opt: folder: the folder.
# opt: command: the command.
# txt: Returns the result of the command.
# use: if runCommandAsUserAndGroup root root /tmp "ls -ltrhia"; then
#        echo "ls -ltrhia run successfully as root/root, on /tmp";
#      fi
function runCommandAsUserAndGroup() {
  local _user="${1}";
  checkNotEmpty user "${_user}" 1;
  local _group="${2}";
  checkNotEmpty group "${_group}" 2;
  local _folder="${3}";
  checkNotEmpty folder "${_folder}" 3;
  local _command="${4}";
  checkNotEmpty command "${_command}" 4;
  shift
  shift
  shift
  shift
  local _args="${@}";
  local _exports="$(export)";

  checkReq chpst;

  local -i rescode;
  local _line="${_command//$'\n'/ } ${_args//$'\n'/ }";
  createTempFile;
  local _runme="${RESULT}";

  createTempFile;
  _runme="${RESULT}";

  cat << EOF > "${_runme}"
#!/bin/bash

${_exports}
declare -x HOME="$(eval echo ~${_user})"
cd ${_folder}
${_line}
EOF
  chmod a+r "${_runme}"
  chmod a+x "${_runme}"

  logDebug "Running ${_command} ${_args} as ${_user}:${_group}";
  chown ${_user}:${_group} "${_runme}"
  exec 2>&1
  chpst -u ${_user}:${_group} "${_runme}";
  rescode=$?;

  return ${rescode};
}

# fun: runCommandLongOutput command
# api: public
# txt: Runs a command supporting logging of command-line and output, even if it's long, since it uses a temporary file to store it.
# opt: command: The command to run.
# txt: Returns the result of the command.
# TODO: find out why this fails. result gets modified externally in the getLogCategory/setLogCategory/logDebug block
# use: if runCommandLongOutput "nmap -Pn"; then ...; fi
function runCommandLongOutput() {
  local _command="$(echo $@ | sed 's_\n_ _g')";
  checkNotEmpty command "${_command}" 1;

  local -i _rescode;

  createTempFile;
  local _result="${RESULT}";

  getLogCategory;
  local _previousLogCategory="${RESULT}";
  setLogCategory "${_previousLogCategory}*";

  logDebug "${_command}";

  if isDebugEnabled; then
    $@ 2>&1 | tee "${_result}" | logDebugFromStdin;
    _rescode=${PIPESTATUS[0]};
  else
    $@ > "${_result}" 2>&1;
    _rescode=$?;
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  setLogCategory "${_previousLogCategory}";

  return ${_rescode};
}

# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
