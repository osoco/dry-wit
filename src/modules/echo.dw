# mod: echo
# api: public
# txt: Functions related to displaying text to stdout.

# fun: echoColorizedText text keyword? defaultColor?
# api: public
# txt: Echoes given text, colorized.
# opt: text: The text to colorize.
# opt: keyword: The keyword (0 -> success; 1 -> failure; other -> try to infer from the text). Optional.
# opt: defaultColor: The default color. Optional.
# txt: Returns 0/TRUE always.
# use: echoColorizeText "done" SUCCESS;
function echoColorizedText() {
  local _text="${1}";
  checkNotEmpty text "${_text}" 1;
  local _keyword="${2}";
  local _defaultColor="${3}";
  if isEmpty "${_defaultColor}"; then
    getNoColor;
    _defaultColor="${RESULT}";
  fi
  local _color="";

  if allowsColors; then
    getSuccessColor;
    _successColor="${RESULT}";
    getFailureColor;
    _failureColor="${RESULT}";
    case ${_keyword} in
      ${SUCCESS}) _color="${_successColor}";
                  ;;
      ${FAILURE}) _color="${_failureColor}";
                  ;;
      *) if isSuccessKeyword "${_text}"; then
           _color="${_successColor}";
         elif isFailureKeyword "${_text}"; then
           _color="${_failureColor}";
         else
           _color="${_defaultColor}";
         fi
         ;;
    esac
    echoColorizedTextWithColor -n "${_color}" "${_text}";
  else
    echo -n "${_text}";
  fi
}

# fun: echoColorizedTextWithColor [-n]? colorName text
# api: public
# txt: Echoes given text, colorized.
# opt: -n: Whether to include a new line at the end of the text.
# opt: colorName: The name of the color.
# opt: text: The text to colorize.
# txt: Returns 0/TRUE always.
# use: echoColorizeTextWithColor WHITE "done";
function echoColorizedTextWithColor() {
  local -i _flagMinusN;
  if [ "${1}" == "-n" ]; then
    _flagMinusN=${TRUE};
    shift;
  else
    _flagMinusN=${FALSE};
  fi
  local _colorName="${1}";
  checkNotEmpty colorName "${_colorName}" 1;
  local _text="${2}";
  checkNotEmpty text "${_text}" 2;

  evalConstant "${_colorName}";
  local _color="${RESULT}";

  allowsColors;
  local -i _allowsColors=$?;

  if isTrue ${_allowsColors}; then
    if isTrue ${_flagMinusN}; then
      echoInColor -n "${_color}" "${_text}";
    else
      echoInColor "${_color}" "${_text}";
    fi
    resetColor;
  elif isTrue ${_flagMinusN}; then
    echo -n "${_text}";
  else
    echo "${_text}";
  fi
}

# fun: echoInColor [-n]? colorName text
# api: public
# txt: Prints a text in color.
# opt: -n: Whether to remove the CRLF from the end (optional).
# opt: colorName: The name of the color.
# opt: text: The text to echo.
# txt: Returns 0/TRUE always.
# use: echoInColor -n RED "Work in progress";
function echoInColor() {
  local _flagMinusN;
  if [ "${1}" == "-n" ]; then
    _flagMinusN=${TRUE};
    shift;
  else
    _flagMinusN=${FALSE};
  fi
  local _color="${1}";
  checkNotEmpty colorName "${_color}" 1;

  local _text="${2}";
  checkNotEmpty text "${_text}" 2;

  local _colorAux="";
  local -i _inColor=${FALSE};
  local _noColor;
  if allowsColors; then
    _inColor=${TRUE};
    getColorEscapeCode "${_color}";
    _colorAux="${RESULT}";
    getNoColor;
    getColorEscapeCode "${RESULT}";
    _noColor="${RESULT}";
  fi

  if isTrue ${_flagMinusN}; then
    if isTrue ${_inColor}; then
      echo -en "${_colorAux}${_text}${_noColor}";
    else
      echo -n "${_text}";
    fi
  else
    if isTrue ${_inColor}; then
      echo -e "${_colorAux}${_text}${_noColor}";
    else
      echo "${_text}";
    fi
  fi
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
