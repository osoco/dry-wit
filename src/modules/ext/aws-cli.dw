# mod: aws-cli
# api: public
# txt: AWS CLI functions

# fun: retrieveAwsCliFromProfileAndRegion awsProfile awsRegion
# api: public
# txt: Retrieves the AWS command-line.
# opt: awsProfile: The AWS profile.
# opt: awsRegion: The AWS region.
# txt: Returns 0/TRUE if the AWS CLI could be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the path and common flags for AWS CLI.
# use: if retrieveAwsCliFromProfileAndRegion "contestia-dev" "us-east-1"; then
# use:   echo "AWS CLI -> ${RESULT}";
# use: fi
function retrieveAwsCliFromProfileAndRegion () {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;
  local _awsRegion="${2}";
  checkNotEmpty awsRegion "${_awsRegion}" 2;
  local -i _rescode;

  local _result="$(which aws) --profile ${_awsProfile} --region ${_awsRegion}";
  _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveAwsRegionForProfile awsProfile
# api: public
# txt: Retrieves the default region for given profile.
# opt: awsProfile: The AWS profile.
# txt: Returns 0/TRUE if the region could be found for given profile; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the region.
# use: if retrieveAwsRegionForProfile ${awsProfile}; then
# use:   echo "region: ${RESULT}";
# use: fi
function retrieveAwsRegionForProfile() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;

  local _result;
  _result="$(sed -n "/^[ \t]*\[profile ${_awsProfile}\]/,/\[/s/^[ \t]*region[ \t]*=[ \t]*//p" ~/.aws/config)";
  local -i _rescode=$?;

  if    isTrue ${_rescode} \
     && isNotEmpty "${_result}"; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveAwsAccessKeyIdForProfile awsProfile
# api: public
# txt: Retrieves the AWS access key id for given profile.
# opt: awsProfile: The AWS profile.
# txt: Returns 0/TRUE if the access key id could be found for given profile; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the access key id.
# use: if retrieveAwsAccessKeyIdForProfile ${awsProfile}; then
# use:   echo "AWS access key id: ${RESULT}";
# use: fi
function retrieveAwsAccessKeyIdForProfile() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;

  local _result;
  _result="$(sed -n "/^[ \t]*\[${_awsProfile}\]/,/\[/s/^[ \t]*aws_access_key_id[ \t]*=[ \t]*//p" ~/.aws/credentials)";
  local -i _rescode=$?;

  if    isTrue ${_rescode} \
     && isNotEmpty "${_result}"; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveAwsSecretAccessKeyForProfile awsProfile
# api: public
# txt: Retrieves the AWS secret access key for given profile.
# opt: awsProfile: The AWS profile.
# txt: Returns 0/TRUE if the secret access key could be found for given profile; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the secret access key.
# use: if retrieveAwsSecretAccessKeyForProfile ${awsProfile}; then
# use:   echo "AWS secret access key retrieved"; # value in RESULT
# use: fi
function retrieveAwsSecretAccessKeyForProfile() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;

  local _result;
  _result="$(sed -n "/^[ \t]*\[${_awsProfile}\]/,/\[/s/^[ \t]*aws_secret_access_key[ \t]*=[ \t]*//p" ~/.aws/credentials)";
  local -i _rescode=$?;

  if    isTrue ${_rescode} \
     && isNotEmpty "${_result}"; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
