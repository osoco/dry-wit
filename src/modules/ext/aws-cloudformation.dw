# mod: aws-cloudformation
# api: public
# txt: AWS Cloudformation functions

# fun: AWS_CLOUDFORMATION.getModuleName
# api: private
# txt: Retrieves the name of the module.
# txt: Returns 0/TRUE always.
# txt: The variable RESULT contains the name of the module.
# use: AWS_CLOUDFORMATION.getModuleName;
# use: echo "Module: ${RESULT}";
function AWS_CLOUDFORMATION.getModuleName() {
  export RESULT="AWS_CLOUDFORMATION";
  return ${TRUE};
}

# fun: isCloudformationTemplateValid template awsCli templateName?
# api: public
# txt: Validates the CloudFormation template.
# opt: template: The template file.
# opt: profile: The AWS profile.
# opt: templateName: A human-readable name of the template. Optional.
# txt: Returns 0/TRUE if the template is correct; 1/FALSE otherwise.
# logging: DEBUG
# logging: TRACE
# use: if isCloudformationTemplateValid "my-template.json" dev; then
# use:   echo "my-template.json is correct";
# use: fi
function isCloudformationTemplateValid() {
  local _template="${1}";
  checkNotEmpty template "${_template}" 1;
  local _profile="${2}";
  checkNotEmpty profile "${_profile}" 2;
  local _templateName="${3}";
  local -i _rescode;
  local _awsCli;
  local _output;

  local _name="${_templateName}";
  if isEmpty "${_name}"; then
    _name="${_template}";
  fi

  logDebug -n "Checking CloudFormation template ${_name}";
  logTrace "$(which aws) --profile ${_profile} cloudformation validate-template --template-body file://${_template}";
  _output="$($(which aws) --profile ${_profile} cloudformation validate-template --template-body file://"${_template}" 2>&1)";
  _rescode=$?;
  if isTrue ${_rescode}; then
    logDebugResult SUCCESS "valid";
  else
    logDebugResult FAILURE "invalid";
    if isNotEmpty "${_output}"; then
      logDebug "${_output}";
    fi
    exitWithErrorCode INVALID_CLOUDFORMATION_TEMPLATE "${_name}";
  fi

  return ${_rescode};
}

# fun: cacheCloudformationExports awsProfile awsRegion file
# api: public
# txt: Retrieves the cloudformation exports to a file.
# opt: awsProfile: The AWS CLI profile.
# opt: awsRegion: The region.
# opt: file: The name of the cache file.
# txt: Returns 0/TRUE if the name was found; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains some error information from the AWS CLI.
# use: if cacheCloudformationExport dev ".cache"; then
# use:   echo "exports cached in .cache: ${RESULT}";
# use: fi
function cacheCloudformationExports() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;
  local _awsRegion="${2}";
  checkNotEmpty awsRegion "${_awsRegion}" 2;
  local _file="${3}";
  checkNotEmpty file "${_file}" 3;

  local -i _rescode=${TRUE};

  local _oldIFS="${IFS}";
  local _region;
  IFS="${DWIFS}";
  for _region in "${_awsRegion}" "us-east-1"; do
    IFS="${_oldIFS}";
    if ! cacheCloudformationExportsForRegion "${_awsProfile}" "${_region}" "${_file}.${_region}"; then
      _rescode=${FALSE};
      break;
    fi
  done
  IFS="${_oldIFS}";

  if isTrue ${_rescode}; then
    local _files=();
    IFS="${DWIFS}";
    for _region in "${_awsRegion}" "us-east-1"; do
      IFS="${_oldIFS}";
      _files+=( "${_file}.${_region}" );
    done;
    IFS="${_oldIFS}";

    jq 'reduce inputs as $i (.; .Exports += $i.Exports)' ${_files[@]} > "${_file}";
    _rescode=$?;
  fi

  if isFalse ${_rescode}; then
    export ERROR="${_result}";
  fi

}

# fun: cacheCloudformationExportsForRegion awsProfile awsRegion file
# api: public
# txt: Retrieves the cloudformation exports to a file.
# opt: awsProfile: The AWS CLI profile.
# opt: file: The name of the cache file.
# txt: Returns 0/TRUE if the name was found; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains some error information from the AWS CLI.
# use: if cacheCloudformationExportForRegion dev us-east-1 ".cache"; then
# use:   echo "us-east-1 exports cached in .cache: ${RESULT}";
# use: fi
function cacheCloudformationExportsForRegion() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;
  local _awsRegion="${2}";
  checkNotEmpty awsRegion "${_awsRegion}" 2;
  local _file="${3}";
  checkNotEmpty file "${_file}" 3;

  createTempFile;
  local _tmpFile="${RESULT}";

  cat <<EOF > "${_tmpFile}"
#!/bin/bash

$(which aws) --profile ${_awsProfile} --region ${_awsRegion} cloudformation list-exports --max-items 200;
EOF
  chmod +x ${_tmpFile};

  local -i _page=0;
  local _result;
  _result="$(${_tmpFile} > "${_file}.${_page}" 2>&1)";
  local -i _rescode=$?;

  local _paginated="$(cat "${_file}.${_page}" | jq '. | has("NextToken")')";
  while isTrue "${_paginated}"; do
    local _token="$(cat "${_file}.${_page}" | jq '.NextToken')";
    ((_page++));
    cat <<EOF > "${_tmpFile}"
#!/bin/bash

$(which aws) --profile ${_awsProfile} --region ${_awsRegion} cloudformation list-exports --max-items 200 --starting-token "${_token}";
EOF
    chmod +x ${_tmpFile};

    ${_tmpFile} > "${_file}.${_page}" 2>&1;
    _paginated="$(cat "${_file}.${_page}" | jq '. | has("NextToken")')";

  done

  local _files=();
  local _oldIFS="${IFS}";
  local _pageIndex;
  IFS="${DWIFS}";
  for _pageIndex in $(seq 0 1 ${_page}); do
    IFS="${_oldIFS}";
    _files+=( "${_file}.${_pageIndex}" );
  done;
  IFS="${_oldIFS}";

  jq 'reduce inputs as $i (.; .Exports += $i.Exports)' ${_files[@]} > "${_file}";
  local -i _rescode=$?;

  if isFalse ${_rescode}; then
    export ERROR="${_result}";
  fi

  rm -f ${_files[@]};

  return ${_rescode};
}

# fun: getCloudformationExport name awsProfile awsRegion
# api: public
# txt: Retrieves the value of an output exported by a CloudFormation stack, under given name.
# opt: name: The name of the export.
# opt: awsProfile: The AWS CLI profile.
# opt: awsRegion: The AWS region. Optional. Defaults to eu-west-1.
# txt: Returns 0/TRUE if the name was found; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains some output from the AWS CLI.
# txt: If the function returns 1/FALSE, the variable ERROR contains some error information from the AWS CLI.
# use: if getCloudformationExport myKey dev eu-west-1; then
# use:   echo "myKey='${RESULT}'";
# use: fi
function getCloudformationExport() {
  local _name="${1}";
  checkNotEmpty name "${_name}" 1;
  local _awsProfile="${2}";
  checkNotEmpty awsProfile "${_awsProfile}" 2;
  local _awsRegion="${3:-eu-west-1}";
  checkNotEmpty awsRegion "${_awsRegion}" 3;
  local _refreshCache="${4:-${FALSE}}";
  checkBoolean refreshCache "${_refreshCache}" 4;
  
  AWS_CLOUDFORMATION.getExportsCacheFile "${_awsProfile}";
  local _cacheFile="${RESULT}";

  AWS_CLOUDFORMATION.getExportsCacheExpirationInMinutes;
  local -i _expiration=${RESULT};

  if   isTrue ${_refreshCache} \
    || ! fileExists "${_cacheFile}" \
    || ! fileModifiedInLastXMinutes "${_cacheFile}" ${_expiration}; then
    cacheCloudformationExports "${_awsProfile}" "${_awsRegion}" "${_cacheFile}";
  fi

  createTempFile;
  local _tmpFile="${RESULT}";

  cat <<EOF > "${_tmpFile}"
#!/bin/bash

val="\$(cat "${_cacheFile}" | jq '.Exports | .[] | select (."Name" == "${_name}") | .Value')";
rescode=\$?;

if [[ "x\${val}" == "x" ]]; then
  rescode=1;
fi

if [[ \${rescode} -eq 0 ]]; then
  echo "\${val}" | tr -d '"';
  rescode=\$?;
fi

exit \${rescode};
EOF
  chmod +x ${_tmpFile};

  local _result;
  _result="$(${_tmpFile})";
  local -i _rescode=$?;

  if isEmpty "${_result}"; then
    _rescode=${FALSE};
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export ERROR="${_result}";
    export RESULT="";
  fi

  return ${_rescode};
}

# fun: listCloudformationStacks environment client
# api: public
# txt: Lists the Cloudformation stacks (name and status).
# opt: environment: The environment.
# opt: stackFullName: The full stack name.
# opt: client: The client. Optional.
# txt: Returns 0/${TRUE} if the stacks could be queried; 1/${FALSE} otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the list of stacks.
# txt: If the function returns 1/FALSE, the variable ERROR contains additional information.
# use: if listCloudformationStacks "pre" "myClient"; then
# use:   echo "stacks -> ${RESULT}";
# use: fi
function listCloudformationStacks() {
  local _awsRegion="${1}";
  checkNotEmpty region "${_awsRegion}" 1;
  local _awsProfile="${2}";
  checkNotEmpty awsProfile "${_awsProfile}" 2;

  local _result;
  _result="$($(which aws) --profile "${_awsProfile}" --region "${_region}" cloudformation list-stacks | jq '.StackSummaries[] | { StackName: .StackName, StackStatus: .StackStatus }')";
  local -i _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export ERROR="${_result}";
  fi

  return ${_rescode};
}

# fun: checkCloudformationStatus stack environment client
# api: public
# txt: Retrieves the status of a given stack.
# opt: stack: The stack name.
# opt: environment: The environment.
# opt: client: The client. Optional.
# txt: Returns 0/${TRUE} if the status could be queried; 1/${FALSE} otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the stack status.
# txt: If the function returns 1/FALSE, the variable ERROR contains additional information.
# use: if checkCloudformationStatus "01-network" "pre" "myClient"; then
# use:   echo "pre-client-01-network status -> ${RESULT}";
# use: fi
function checkCloudformationStackStatus() {
  local _stack="${1}";
  checkNotEmpty stack "${_stack}" 1;
  local _awsRegion="${2}";
  checkNotEmpty region "${_awsRegion}" 2;
  local _awsProfile="${3}";
  checkNotEmpty awsProfile "${_awsProfile}" 3;

  local _aux;
  _aux="$($(which aws) --profile "${_awsProfile}" --region "${_awsRegion}" cloudformation list-stacks | jq '.StackSummaries[] | { StackName: .StackName, StackStatus: .StackStatus }' | grep -C 1 -- "\"${_stack}\"")";
  local -i _rescode=$?;

  local _result="$(echo "${_aux}" | grep StackStatus | head -n 1 | awk -F'"' '{print $4}' 2>&1)";

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  else
    export ERROR="${_aux}";
  fi

  return ${_rescode};
}

# fun: requestCreateStack awsProfile stackName region template tags parameters
# api: public
# txt: Requests the creation of given stack.
# opt: awsProfile: The AWS profile.
# opt: stackName: The stack name.
# opt: region: The AWS region.
# opt: template: The template file.
# opt: tags: The tags.
# opt: parameters: The parameters.
# txt: Returns 0/${TRUE} if the stack gets deployed successfully; 1/${FALSE} otherwise.
# use: if requestCreateStack "my-profile" "pre-1-my-stack" "eu-west-1" "stack.json" "Key=vendor:name,Value=Vendor1 Key=vendor:timestamp,Value=today" "ParameterKey=Environment,ParameterValue=test ParameterKey=AllowedCidrs,ParameterValue=0.0.0.0/0"; then
# use:   echo "pre-1-my-stack is being created";
# use: fi
function requestCreateStack() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;
  local _stackName="${2}";
  checkNotEmpty stackName "${_stackName}" 2;
  local _region="${3}";
  checkNotEmpty region "${_region}" 3;
  local _template="${4}";
  checkNotEmpty template "${_template}" 4;
  local _tags="${5}";
  checkNotEmpty tags "${_tags}" 5;
  local _parameters="${6}";
  checkNotEmpty parameters "${_parameters}" 6;

  requestCreateOrUpdateStack create "${_awsProfile}" "${_stackName}" "${_region}" "${_template}" "${_tags}" "${_parameters}";
}

# fun: requestUpdateStack awsProfile stackName region template tags parameters
# api: public
# txt: Requests the modification of given stack.
# opt: awsProfile: The AWS profile.
# opt: stackName: The stack name.
# opt: region: The AWS region.
# opt: template: The template file.
# opt: tags: The tags.
# opt: parameters: The parameters.
# txt: Returns 0/${TRUE} if the stack gets deployed successfully; 1/${FALSE} otherwise.
# use: if requestUpdateStack "my-profile" "pre-1-my-stack" "eu-west-1" "stack.json" "Key=vendor:name,Value=Vendor1 Key=vendor:timestamp,Value=today" "ParameterKey=Environment,ParameterValue=test ParameterKey=AllowedCidrs,ParameterValue=0.0.0.0/0"; then
# use:   echo "pre-1-my-stack is being updated";
# use: fi
function requestUpdateStack() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;
  local _stackName="${2}";
  checkNotEmpty stackName "${_stackName}" 2;
  local _region="${3}";
  checkNotEmpty region "${_region}" 3;
  local _template="${4}";
  checkNotEmpty template "${_template}" 4;
  local _tags="${5}";
  checkNotEmpty tags "${_tags}" 5;
  local _parameters="${6}";
  checkNotEmpty parameters "${_parameters}" 6;

  requestCreateOrUpdateStack update "${_awsProfile}" "${_stackName}" "${_region}" "${_template}" "${_tags}" "${_parameters}";
}

# fun: requestCreateOrUpdateStack awsProfile stackName region template tags parameters
# api: public
# txt: Requests the creation or modification of given stack.
# opt: action: either create or update.
# opt: awsProfile: The AWS profile.
# opt: stackName: The stack name.
# opt: region: The AWS region.
# opt: template: The template file.
# opt: tags: The tags.
# opt: parameters: The parameters.
# txt: Returns 0/${TRUE} if the stack gets deployed successfully; 1/${FALSE} otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains some output from the AWS CLI.
# txt: If the function returns 1/FALSE, the variable ERROR contains some error information from the AWS CLI.
# use: if requestCreateOrUpdateStack "my-profile" "pre-1-my-stack" "eu-west-1" "stack.json" "Key=vendor:name,Value=Vendor1 Key=vendor:timestamp,Value=today" "ParameterKey=Environment,ParameterValue=test ParameterKey=AllowedCidrs,ParameterValue=0.0.0.0/0"; then
# use:   echo "pre-1-my-stack is being created";
# use: fi
function requestCreateOrUpdateStack() {
  local _action="${1}";
  checkNotEmpty action "${_action}" 1;
  local _awsProfile="${2}";
  checkNotEmpty awsProfile "${_awsProfile}" 2;
  local _stackName="${3}";
  checkNotEmpty stackName "${_stackName}" 3;
  local _region="${4}";
  checkNotEmpty region "${_region}" 4;
  local _template="${5}";
  checkNotEmpty template "${_template}" 5;
  local _tags="${6}";
  checkNotEmpty tags "${_tags}" 6;
  local _parameters="${7}";
  checkNotEmpty parameters "${_parameters}" 7;

  createTempFile;
  local _tmpFile="${RESULT}";
  cat <<EOF > "${_tmpFile}"
#!/bin/bash

$(which aws) --profile ${_awsProfile} --region ${_region} cloudformation ${_action}-stack --stack-name ${_stackName} --tags ${_tags} --template-body file://${_template} --parameters ${_parameters} --capabilities CAPABILITY_NAMED_IAM 2>&1;
EOF
  chmod +x "${_tmpFile}";
  local _output;
  _output="$(${_tmpFile})";
  local -i _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_output}";
  else
    export ERROR="${_output}";
  fi

  return ${_rescode};
}

# fun: requestDeleteStack awsProfile stackName environment client
# api: public
# txt: Requests the deletion of given stack.
# opt: awsProfile: The AWS profile.
# opt: stackName: The stack name.
# opt: region: The AWS region.
# txt: Returns 0/${TRUE} if the stack gets deleted successfully; 1/${FALSE} otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains some output from the AWS CLI.
# txt: If the function returns 1/FALSE, the variable ERROR contains some error information from the AWS CLI.
# use: if requestDeleteStack "my-profile" "pre-1-my-stack" "eu-west-1"; then
# use:   echo "pre-1-my-stack deleted successfully";
# use: fi
function requestDeleteStack() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;
  local _stackName="${2}";
  checkNotEmpty stackName "${_stackName}" 2;
  local _region="${3}";
  checkNotEmpty region "${_region}" 3;

  local _output;
  _output="$($(which aws) --profile "${_awsProfile}" --region ${_region} cloudformation delete-stack --stack-name "${_stackName}")";
  local -i _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_output}";
  else
    export ERROR="${_output}";
  fi

  return ${_rescode};
}

# fun: refreshAwsCloudformationExportsCache awsProfile
# api: public
# txt: Ensures the exports cache gets refreshed.
# opt: awsProfile: The AWS profile.
# txt: Returns 0/TRUE always.
# use: refreshAwsCloudformationExportsCache myProfile;
function refreshAwsCloudformationExportsCache() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;

  AWS_CLOUDFORMATION.getExportsCacheFile "${_awsProfile}";
  rm -f "${RESULT}";
}

# fun: awsCloudformationJsonTemplateDefinesParameter template parameter
# api: public
# txt: Checks whether given template includes a certain parameter.
# opt: template: The template.
# opt: parameter: The parameter.
# txt: Returns 0/TRUE if the template includes the parameter; 1/FALSE otherwise.
# use: if awsCloudformationJsonTemplateDefinesParameter myTemplate.json AwsRegion; then
# use:   echo "myTemplate.json defines AwsRegion parameter";
# use: fi
function awsCloudformationJsonTemplateDefinesParameter() {
  local _template="${1}";
  checkNotEmpty template "${_template}" 1;
  local _parameter="${2}";
  checkNotEmpty parameter "${_parameter}" 2;

  local -i _rescode=${FALSE};

  createTempFile;
  local _tmpFile="${RESULT}";

  cat <<EOF > "${_tmpFile}"
#!/bin/bash

out="\$(cat "${_template}" | jq '.Parameters | has("${_parameter}")')";

rescode=1;
if [[ "x\${out}" == "xtrue" ]]; then
  rescode=0;
fi

exit \${rescode};
EOF

  chmod +x "${_tmpFile}";
  ${_tmpFile};
  _rescode=$?;

  return ${_rescode};
}

# fun: AWS_CLOUDFORMATION.getExportsCacheFile awsProfile
# api: private
# txt: Retrieves the name of the file with the exports.
# opt: awsProfile: The AWS profile.
# txt: Returns 0/TRUE always.
# use: AWS_CLOUDFORMATION.getExportsCacheFile myProfile;
# use: echo "File: ${RESULT}";
function AWS_CLOUDFORMATION.getExportsCacheFile() {
  local _awsProfile="${1}";
  checkNotEmpty awsProfile "${_awsProfile}" 1;

  AWS_CLOUDFORMATION.getExportsCacheFileName;
  export RESULT="${RESULT}-${_awsProfile}";
}

# fun: AWS_CLOUDFORMATION.getExportsCacheFileName
# api: private
# txt: Retrieves the prefix of the file used to cache exports.
# txt: Returns 0/TRUE always.
# use: AWS_CLOUDFORMATION.getExportsCacheFileName;
# use: echo "File: ${RESULT}";
function AWS_CLOUDFORMATION.getExportsCacheFileName() {
  AWS_CLOUDFORMATION.getModuleName;
  DW.getGlobalString "${RESULT}" EXPORTS_CACHE_FILE_NAME;
}

# fun: AWS_CLOUDFORMATION.setExportsCacheFileName file
# api: private
# txt: Specifies the name of the file with the exports.
# opt: file: The cache file.
# txt: Returns 0/TRUE always.
# use: AWS_CLOUDFORMATION.setExportsCacheFileName "my-cache-file";
function AWS_CLOUDFORMATION.setExportsCacheFileName() {
  local _file="${1}";
  checkNotEmpty file "${_file}" 1;

  AWS_CLOUDFORMATION.getModuleName;
  DW.setGlobalString "${RESULT}" EXPORTS_CACHE_FILE_NAME "${_file}";
}

# fun: AWS_CLOUDFORMATION.getExportsCacheExpirationInMinutes
# api: private
# txt: Retrieves the minutes before the exports cache expires.
# txt: Returns 0/TRUE always.
# use: AWS_CLOUDFORMATION.getExportsCacheExpirationInMinutes;
# use: echo "Expiration: ${RESULT}";
function AWS_CLOUDFORMATION.getExportsCacheExpirationInMinutes() {
  AWS_CLOUDFORMATION.getModuleName;
  DW.getGlobalInt "${RESULT}" EXPORTS_CACHE_EXPIRATION_IN_MINUTES;
}

# fun: AWS_CLOUDFORMATION.setExportsCacheExpirationInMinutes duration
# api: private
# txt: Specifies the minutes before the exports cache expires.
# opt: duration: The duration of the cache.
# txt: Returns 0/TRUE always.
# use: AWS_CLOUDFORMATION.setExportsCacheExpirationInMinutes 15;
function AWS_CLOUDFORMATION.setExportsCacheExpirationInMinutes() {
  local _duration="${1}";
  checkNotEmpty duration "${_duration}" 1;
  checkNumber duration "${_duration}" 1;

  AWS_CLOUDFORMATION.getModuleName;
  DW.getGlobalInt "${RESULT}" ${_duration};
}

# fun: AWS_CLOUDFORMATION.resetState
# api: private
# txt: Resets the module state.
# txt: Returns 0/TRUE always.
# use: CLI.resetState
function AWS_CLOUDFORMATION.resetState() {
  AWS_CLOUDFORMATION.getModuleName;
  local _moduleName="${RESULT}";

  DW.getScriptFolder;
  local _scriptFolder="${RESULT}";

  # env: EXPORTS_CACHE_FILE_NAME: The name of the file with the cached exports.
  DW.declareGlobalString "${_moduleName}" EXPORTS_CACHE_FILE_NAME "${_scriptFolder}/.cloudformation-exports";

  # env: EXPORTS_CACHE_EXPIRATION_IN_MINUTES: The minutes before the exports cache expires.
  DW.declareGlobalInt "${_moduleName}" EXPORTS_CACHE_EXPIRATION_IN_MINUTES 30;
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
