# mod: aws-secrets
# api: public
# txt: AWS SecretsManager functions

# fun: retrieveAwsSecretValueSecretString secretId awsProfile? awsRegion?
# api: public
# txt: Retrieves the value of an AWS Secret.
# opt: secretId: The id of the secret.
# opt: awsProfile: The AWS profile. Optional.
# opt: awsRegion: The AWS region. Optional.
# txt: Returns 0/TRUE if the secret was retrieved successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the secret value.
# use: if retrieveAwsSecretValueSecretString "my/secret" contestia-dev eu-west-1; then
# use:   echo "Secret -> ${RESULT}";
# use: fi
function retrieveAwsSecretValueSecretString () {
  local _secretId="${1}";
  checkNotEmpty secretId "${_secretId}" 1;
  local _awsProfile="${2:-}";
  local _awsRegion="${3:-}";

  local _profilePart="";
  if isNotEmpty "${_awsProfile}"; then
    _profilePart=" --profile ${_awsProfile}";
  fi

  local _regionPart="";
  if isNotEmpty "${_awsRegion}"; then
    _regionPart=" --region ${_awsRegion}";
  fi

  local -i _rescode;
  
  local _result;
  _result="$($(which aws) ${_profilePart}${_regionPart} secretsmanager get-secret-value --secret-id "${_secretId}" 2>&1)";
  _rescode=$?;

  if isTrue ${_rescode}; then
    _result="$(echo "${_result}" | jq '.SecretString')";
    _rescode=$?;
  fi

  if isTrue ${_rescode}; then
    _result="$(echo "${_result}" | tr -d '"')";
    _rescode=$?;
  fi

  if isTrue ${_rescode}; then
    export RESULT="${_result}";
  fi

  return ${_rescode};
}

# fun: retrieveAwsSecretValueSecretStringEntry secretId entryName awsProfile? awsRegion?
# api: public
# txt: Retrieves the value of a specific JSON entry in an AWS Secret.
# opt: secretId: The id of the secret.
# opt: entry: The name of the JSON entry.
# opt: awsProfile: The AWS profile. Optional.
# opt: awsRegion: The AWS region. Optional.
# txt: Returns 0/TRUE if the secret be retrieved; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the value of the entry in the secret.
# txt: If the function returns 1/FALSE, the variable ERROR contains some information, for troubleshooting purposes.
# use: if retrieveAwsSecretValueSecretStringEntry "my/secret" SMTP_PASSWORD contestia-dev eu-west-1; then
# use:   echo "Secret -> ${RESULT}";
# use: fi
function retrieveAwsSecretValueSecretStringEntry () {
  local _secretId="${1}";
  checkNotEmpty secretId "${_secretId}" 1;
  local _entry="${2}";
  checkNotEmpty entry "${_entry}" 2;
  local _awsProfile="${3:-}";
  local _awsRegion="${4:-}";

  local -i _rescode=${FALSE};

  if retrieveAwsSecretValueSecretString "${_secretId}" "${_awsProfile}" "${_awsRegion}" ; then
    local _json="${RESULT}";
    local _result;
    _result="$(echo "${_json}" | sed 's \\ \" g' 2>&1)";
    _rescode=$?;

    local _error="";
    
    if isTrue ${_rescode}; then
      _result="$(echo "${_result}" | jq ".${_entry}" 2>&1)";
      _rescode=$?;
    else
      _error="${_result}";
    fi

    if isTrue ${_rescode}; then
      _result="$(echo "${_result}" | tr -d '"' 2>&1)";
      _rescode=$?;
    else
      _error="${_result}";
    fi

    if isTrue ${_rescode}; then
      export RESULT="${_result}";
    else
      export ERROR="${_error}";
    fi
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
