# mod: aws-ecr
# api: public
# txt: AWS ECR functions

# fun: getEcrImages repository profile?
# api: public
# txt: Retrieves the list of ECR images.
# opt: repository: The repository.
# opt: profile: The AWS profile. Optional.
# txt: Returns 0/TRUE if the name of the images was accessible; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains a list of space-separated image identifiers.
# txt: If the function returns 1/FALSE, the variable ERROR contains more information.
# use: if getEcrImages "my/repository" dev; then
# use:   echo "Images: ${RESULT}";
# use: fi
function getEcrImages() {
  local _repository="${1}";
  checkNotEmpty repository "${_repository}" 1;
  local _profile="${2:-}";

  local _profileParam="";
  if isNotEmpty "${_profile}"; then
    _profileParam="--profile ${_profile}";
  fi

  local _output;
  _output="$($(which aws) ${_profileParam} ecr list-images --repository "${_repository}" | jq '.imageIds[] | .imageDigest' | tr -d '"' 2>&1)";
  local -i _rescode=$?;

  if isTrue ${_rescode}; then
    export RESULT="${_output}";
  else
    export ERROR="${_output}";
  fi

  return ${_rescode};
}

# fun: emptyEcrRepository repository profile?
# api: public
# txt: Empties a ECR repository.
# opt: repository: The repository.
# opt: profile: The AWS profile. Optional.
# txt: Returns 0/TRUE if the repository could be emptied; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains more information.
# use: if emptyEcrRepository "my/repository" dev; then
# use:   echo "Repository now empty";
# use: fi
function emptyEcrRepository() {
  local _repository="${1}";
  checkNotEmpty repository "${_repository}" 1;
  local _profile="${2:-}";

  local -i _rescode=${FALSE};

  if getEcrImages "${_repository}" "${_profile}"; then
    local _images="${RESULT}";
    if isEmpty "${_images}"; then
      _rescode=${TRUE};
    else
      deleteEcrImages "${_repository}" "${_profile}" ${_images};
      _rescode=$?;
    fi
  fi

  return ${_rescode};
}

# fun: deleteEcrRepository repository profile?
# api: public
# txt: Deletes a ECR repository.
# opt: repository: The repository.
# opt: profile: The AWS profile. Optional.
# txt: Returns 0/TRUE if the repository could be deleted; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains more information.
# use: if deleteEcrRepository "my/repository" dev; then
# use:   echo "Repository deleted";
# use: fi
function deleteEcrRepository() {
  local _repository="${1}";
  checkNotEmpty repository "${_repository}" 1;
  local _profile="${2:-}";

  local _profileParam="";
  if isNotEmpty "${_profile}"; then
    _profileParam="--profile ${_profile}";
  fi

  local -i _rescode=${FALSE};

  createTempFile;
  local _tmpFile="${RESULT}";
  cat <<EOF > "${_tmpFile}"
#!/usr/bin/env bash

$(which aws) ${_profileParam} ecr delete-repository --repository-name "${_repository}";
EOF
  chmod +x "${_tmpFile}";

  local _output;
  _output="$(${_tmpFile} 2>&1)";
  local -i _rescode=$?;

  if isFalse ${_rescode}; then
    export ERROR="$(cat "${_tmpFile}")
-----
${_output}";
  fi

  return ${_rescode};
}

# fun: deleteEcrImages repository profile imageDigests+
# api: public
# txt: Deletes one or more Docker images in given ECR repository.
# opt: imageDigests: The digests of the images to delete.
# opt: repository: The repository.
# opt: profile: The AWS profile.
# txt: Returns 0/TRUE if the images could be deleted; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains more information.
# use: if deleteEcrImages repository dev sha256:42304204 other/image; then
# use:   echo "Images deleted";
# use: fi
function deleteEcrImages() {
  local _repository="${1}";
  checkNotEmpty repository "${_repository}" 1;
  local _profile="${2}";
  checkNotEmpty profile "${_profile}" 2;
  shift;
  shift;
  checkNotEmpty image "${@}" 3;

  local _profileParam="";
  if isNotEmpty "${_profile}"; then
    _profileParam="--profile ${_profile}";
  fi

  local _images;
  local _oldIFS="${_oldIFS}";
  local _image;
  IFS="${DWIFS}"
  for _image in ${@}; do
    IFS="${_oldIFS}";
    if isNotEmpty "${_images}"; then
      _images="${_images} ";
    fi
    _images="${_images}imageDigest=${_image}";
  done
  IFS="${_oldIFS}";

  createTempFile;
  local _tmpFile="${RESULT}";
  cat <<EOF > "${_tmpFile}"
#!/usr/bin/env bash

$(which aws) ${_profileParam} ecr batch-delete-image --repository-name "${_repository}" --image-ids ${_images};
EOF
  chmod +x "${_tmpFile}";

  local _output;
  _output="$(${_tmpFile} 2>&1)";
  local -i _rescode=$?;

  if isFalse ${_rescode}; then
    export ERROR="$(cat "${_tmpFile}")
-----
${_output}";
  fi

  return ${_rescode};
}

# fun: ecrRepositoryAlreadyExists bucket profile?
# api: public
# txt: Checks if a repository actually exists.
# opt: bucket: The bucket.
# opt: profile: The AWS profile. Optional.
# txt: Returns 0/TRUE if the ECR repository exists; 1/FALSE otherwise.
# use: if ecrRepositoryAlreadyExists myRepository dev; then
# use:   echo "ECR Repository myRepository exists";
# use: fi
function ecrRepositoryAlreadyExists() {
  local _repository="${1}";
  checkNotEmpty repository "${_repository}" 1;
  local _profile="${2:-}";

  local _profileParam="";
  if isNotEmpty "${_profile}"; then
    _profileParam="--profile ${_profile}";
  fi

  createTempFile;
  local _tmpFile="${RESULT}";

  cat <<EOF > "${_tmpFile}"
#!/usr/bin/env bash

aws ${_profileParam} ecr describe-repositories | jq '.repositories' | jq '.[] | select (."repositoryName" == "${_repository}") | .repositoryName' | tr -d '"'
EOF
  chmod +x ${_tmpFile};

  local _output;
  _output="$(${_tmpFile})";
  local -i _rescode=${FALSE};
  if areEqual "${_output}" "${_repository}"; then
    _rescode=${TRUE};
  fi

  return ${_rescode};
}

# fun: pushImageToEcrRepository image repository profile?
# api: public
# txt: Pushes a Docker image to a given ECR repository.
# opt: image: The image.
# opt: repository: The repository.
# opt: profile: The AWS profile. Optional.
# txt: Returns 0/TRUE if the image gets pushed successfully; 1/FALSE otherwise.
# txt: If the function returns 0/TRUE, the variable RESULT contains the logging from the push operation.
# txt: If the function returns 1/FALSE, the variable ERROR contains more information.
# use: if ! pushImageToEcrRepository 'myImage:tag' "my/repository" dev; then
# use:   echo "Could not push myImage:tag ${ERROR}";
# use: fi
function pushImageToEcrRepository() {
  local _image="${1}";
  checkNotEmpty image "${_image}" 1;
  local _repository="${2}";
  checkNotEmpty repository "${_repository}" 2;
  local _profile="${3:-}";

  local -i _rescode=${FALSE};
  local _output;

  if ecrLogin "${_profile}"; then

    _output="$(docker tag "${_image}" "${_repository}:${_image#*:}")";
    _rescode=$?;

    if isTrue ${_rescode}; then
      _output="$(docker push "${_repository}:${_image#*:}")";
      _rescode=$?;

      if isTrue ${_rescode}; then
        export RESULT="${_output}";
      else
        export ERROR="${_output}";
      fi
    else
      export ERROR="${_output}";
    fi
  fi

  return ${_rescode};
}

# fun: ecrLogin profile?
# api: public
# txt: Performs a login into ECR.
# opt: image: The image.
# opt: profile: The AWS profile. Optional.
# txt: Returns 0/TRUE if the login succeeds; 1/FALSE otherwise.
# txt: If the function returns 1/FALSE, the variable ERROR contains more information.
# use: if ! ecrLogin dev; then
# use:   echo "Could not login: ${ERROR}";
# use: fi
function ecrLogin() {
  local _profile="${1:-}";

  local _profileParam="";
  if isNotEmpty "${_profile}"; then
    _profileParam="--profile ${_profile}";
  fi

  local _awsLogIn;
  _awsLogIn="$(aws ${_profileParam} ecr get-login --no-include-email)";
  local _output;
  createTempFile;
  local _tmpFile="${RESULT}";
  cat <<EOF >> "${_tmpFile}"
#!/usr/bin/env bash

${_awsLogIn} 2> /dev/null;
EOF
  chmod +x "${_tmpFile}";
  _output="$(${_tmpFile})";
  _rescode=$?;

  if isFalse ${_rescode}; then
    export ERROR="${_output}";
  fi

  return ${_rescode};
}
# vim: syntax=sh ts=2 sw=2 sts=4 sr noet
